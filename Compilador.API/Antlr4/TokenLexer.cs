//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Token.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class TokenLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		WHITESPACE=1, EPSILON=2, OPEN_PARENTHESIS=3, CLOSE_PARENTHESIS=4, OPEN_BRACKET=5, 
		CLOSE_BRACKET=6, OPEN_CURLYBRACKET=7, CLOSE_CURLYBRACKET=8, COMMA=9, SEMICOLON=10, 
		PLUS=11, MINUS=12, TIMES=13, DIV=14, MOD=15, NOT=16, ATTRIBUTION=17, LOWER=18, 
		LOWER_EQUAL=19, BIGGER=20, BIGGER_EQUAL=21, DIFFERENT=22, EQUALS=23, OR=24, 
		AND=25, FUNC=26, COMP=27, NEWLINE=28, COMMENT=29, TEXT=30, IF=31, INT=32, 
		FOR=33, CHAR=34, ELSE=35, MAIN=36, VOID=37, FLOAT=38, SCANF=39, WHILE=40, 
		BOOLEAN=41, PRINTLN=42, RETURN=43, BOOL=44, LETTER=45, INTEGER=46, DECIMAL=47, 
		ID=48;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"WHITESPACE", "EPSILON", "OPEN_PARENTHESIS", "CLOSE_PARENTHESIS", "OPEN_BRACKET", 
		"CLOSE_BRACKET", "OPEN_CURLYBRACKET", "CLOSE_CURLYBRACKET", "COMMA", "SEMICOLON", 
		"PLUS", "MINUS", "TIMES", "DIV", "MOD", "NOT", "ATTRIBUTION", "LOWER", 
		"LOWER_EQUAL", "BIGGER", "BIGGER_EQUAL", "DIFFERENT", "EQUALS", "OR", 
		"AND", "FUNC", "COMP", "NEWLINE", "COMMENT", "TEXT", "IF", "INT", "FOR", 
		"CHAR", "ELSE", "MAIN", "VOID", "FLOAT", "SCANF", "WHILE", "BOOLEAN", 
		"PRINTLN", "RETURN", "BOOL", "LETTER", "INTEGER", "DECIMAL", "ID"
	};


	public TokenLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public TokenLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, "'('", "')'", "'['", "']'", "'{'", "'}'", "','", "';'", 
		"'+'", "'-'", "'*'", "'/'", "'%'", "'!'", "'='", "'<'", "'<='", "'>'", 
		"'>='", "'!='", "'=='", "'||'", "'&&'", "'func'", null, null, null, null, 
		"'if'", "'int'", "'for'", "'char'", "'else'", "'main'", "'void'", "'float'", 
		"'scanf'", "'while'", "'boolean'", "'println'", "'return'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WHITESPACE", "EPSILON", "OPEN_PARENTHESIS", "CLOSE_PARENTHESIS", 
		"OPEN_BRACKET", "CLOSE_BRACKET", "OPEN_CURLYBRACKET", "CLOSE_CURLYBRACKET", 
		"COMMA", "SEMICOLON", "PLUS", "MINUS", "TIMES", "DIV", "MOD", "NOT", "ATTRIBUTION", 
		"LOWER", "LOWER_EQUAL", "BIGGER", "BIGGER_EQUAL", "DIFFERENT", "EQUALS", 
		"OR", "AND", "FUNC", "COMP", "NEWLINE", "COMMENT", "TEXT", "IF", "INT", 
		"FOR", "CHAR", "ELSE", "MAIN", "VOID", "FLOAT", "SCANF", "WHILE", "BOOLEAN", 
		"PRINTLN", "RETURN", "BOOL", "LETTER", "INTEGER", "DECIMAL", "ID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Token.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static TokenLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,48,319,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,1,0,4,0,99,8,0,
		11,0,12,0,100,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,
		1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,
		14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,20,1,20,1,
		20,1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,
		25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,3,26,170,8,26,1,27,3,27,
		173,8,27,1,27,1,27,4,27,177,8,27,11,27,12,27,178,1,28,1,28,1,28,1,28,5,
		28,185,8,28,10,28,12,28,188,9,28,1,28,1,28,1,29,1,29,5,29,194,8,29,10,
		29,12,29,197,9,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,32,1,
		32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,35,1,
		35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,
		37,1,38,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,40,1,
		40,1,40,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,
		41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,1,
		43,1,43,1,43,3,43,282,8,43,1,44,3,44,285,8,44,1,45,4,45,288,8,45,11,45,
		12,45,289,1,46,4,46,293,8,46,11,46,12,46,294,1,46,1,46,4,46,299,8,46,11,
		46,12,46,300,1,47,4,47,304,8,47,11,47,12,47,305,1,47,5,47,309,8,47,10,
		47,12,47,312,9,47,1,47,5,47,315,8,47,10,47,12,47,318,9,47,2,186,195,0,
		48,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
		14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,
		26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,
		38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,1,0,3,2,
		0,9,10,13,13,3,0,65,90,95,95,97,122,1,0,48,57,336,0,1,1,0,0,0,0,3,1,0,
		0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,
		1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,
		0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
		1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,
		0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,
		1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,
		0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,
		1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,
		0,0,93,1,0,0,0,0,95,1,0,0,0,1,98,1,0,0,0,3,104,1,0,0,0,5,106,1,0,0,0,7,
		108,1,0,0,0,9,110,1,0,0,0,11,112,1,0,0,0,13,114,1,0,0,0,15,116,1,0,0,0,
		17,118,1,0,0,0,19,120,1,0,0,0,21,122,1,0,0,0,23,124,1,0,0,0,25,126,1,0,
		0,0,27,128,1,0,0,0,29,130,1,0,0,0,31,132,1,0,0,0,33,134,1,0,0,0,35,136,
		1,0,0,0,37,138,1,0,0,0,39,141,1,0,0,0,41,143,1,0,0,0,43,146,1,0,0,0,45,
		149,1,0,0,0,47,152,1,0,0,0,49,155,1,0,0,0,51,158,1,0,0,0,53,169,1,0,0,
		0,55,176,1,0,0,0,57,180,1,0,0,0,59,191,1,0,0,0,61,200,1,0,0,0,63,203,1,
		0,0,0,65,207,1,0,0,0,67,211,1,0,0,0,69,216,1,0,0,0,71,221,1,0,0,0,73,226,
		1,0,0,0,75,231,1,0,0,0,77,237,1,0,0,0,79,243,1,0,0,0,81,249,1,0,0,0,83,
		257,1,0,0,0,85,265,1,0,0,0,87,281,1,0,0,0,89,284,1,0,0,0,91,287,1,0,0,
		0,93,292,1,0,0,0,95,303,1,0,0,0,97,99,7,0,0,0,98,97,1,0,0,0,99,100,1,0,
		0,0,100,98,1,0,0,0,100,101,1,0,0,0,101,102,1,0,0,0,102,103,6,0,0,0,103,
		2,1,0,0,0,104,105,1,0,0,0,105,4,1,0,0,0,106,107,5,40,0,0,107,6,1,0,0,0,
		108,109,5,41,0,0,109,8,1,0,0,0,110,111,5,91,0,0,111,10,1,0,0,0,112,113,
		5,93,0,0,113,12,1,0,0,0,114,115,5,123,0,0,115,14,1,0,0,0,116,117,5,125,
		0,0,117,16,1,0,0,0,118,119,5,44,0,0,119,18,1,0,0,0,120,121,5,59,0,0,121,
		20,1,0,0,0,122,123,5,43,0,0,123,22,1,0,0,0,124,125,5,45,0,0,125,24,1,0,
		0,0,126,127,5,42,0,0,127,26,1,0,0,0,128,129,5,47,0,0,129,28,1,0,0,0,130,
		131,5,37,0,0,131,30,1,0,0,0,132,133,5,33,0,0,133,32,1,0,0,0,134,135,5,
		61,0,0,135,34,1,0,0,0,136,137,5,60,0,0,137,36,1,0,0,0,138,139,5,60,0,0,
		139,140,5,61,0,0,140,38,1,0,0,0,141,142,5,62,0,0,142,40,1,0,0,0,143,144,
		5,62,0,0,144,145,5,61,0,0,145,42,1,0,0,0,146,147,5,33,0,0,147,148,5,61,
		0,0,148,44,1,0,0,0,149,150,5,61,0,0,150,151,5,61,0,0,151,46,1,0,0,0,152,
		153,5,124,0,0,153,154,5,124,0,0,154,48,1,0,0,0,155,156,5,38,0,0,156,157,
		5,38,0,0,157,50,1,0,0,0,158,159,5,102,0,0,159,160,5,117,0,0,160,161,5,
		110,0,0,161,162,5,99,0,0,162,52,1,0,0,0,163,170,3,35,17,0,164,170,3,37,
		18,0,165,170,3,39,19,0,166,170,3,41,20,0,167,170,3,43,21,0,168,170,3,45,
		22,0,169,163,1,0,0,0,169,164,1,0,0,0,169,165,1,0,0,0,169,166,1,0,0,0,169,
		167,1,0,0,0,169,168,1,0,0,0,170,54,1,0,0,0,171,173,5,13,0,0,172,171,1,
		0,0,0,172,173,1,0,0,0,173,174,1,0,0,0,174,177,5,10,0,0,175,177,5,13,0,
		0,176,172,1,0,0,0,176,175,1,0,0,0,177,178,1,0,0,0,178,176,1,0,0,0,178,
		179,1,0,0,0,179,56,1,0,0,0,180,181,5,47,0,0,181,182,5,47,0,0,182,186,1,
		0,0,0,183,185,9,0,0,0,184,183,1,0,0,0,185,188,1,0,0,0,186,187,1,0,0,0,
		186,184,1,0,0,0,187,189,1,0,0,0,188,186,1,0,0,0,189,190,3,55,27,0,190,
		58,1,0,0,0,191,195,5,34,0,0,192,194,9,0,0,0,193,192,1,0,0,0,194,197,1,
		0,0,0,195,196,1,0,0,0,195,193,1,0,0,0,196,198,1,0,0,0,197,195,1,0,0,0,
		198,199,5,34,0,0,199,60,1,0,0,0,200,201,5,105,0,0,201,202,5,102,0,0,202,
		62,1,0,0,0,203,204,5,105,0,0,204,205,5,110,0,0,205,206,5,116,0,0,206,64,
		1,0,0,0,207,208,5,102,0,0,208,209,5,111,0,0,209,210,5,114,0,0,210,66,1,
		0,0,0,211,212,5,99,0,0,212,213,5,104,0,0,213,214,5,97,0,0,214,215,5,114,
		0,0,215,68,1,0,0,0,216,217,5,101,0,0,217,218,5,108,0,0,218,219,5,115,0,
		0,219,220,5,101,0,0,220,70,1,0,0,0,221,222,5,109,0,0,222,223,5,97,0,0,
		223,224,5,105,0,0,224,225,5,110,0,0,225,72,1,0,0,0,226,227,5,118,0,0,227,
		228,5,111,0,0,228,229,5,105,0,0,229,230,5,100,0,0,230,74,1,0,0,0,231,232,
		5,102,0,0,232,233,5,108,0,0,233,234,5,111,0,0,234,235,5,97,0,0,235,236,
		5,116,0,0,236,76,1,0,0,0,237,238,5,115,0,0,238,239,5,99,0,0,239,240,5,
		97,0,0,240,241,5,110,0,0,241,242,5,102,0,0,242,78,1,0,0,0,243,244,5,119,
		0,0,244,245,5,104,0,0,245,246,5,105,0,0,246,247,5,108,0,0,247,248,5,101,
		0,0,248,80,1,0,0,0,249,250,5,98,0,0,250,251,5,111,0,0,251,252,5,111,0,
		0,252,253,5,108,0,0,253,254,5,101,0,0,254,255,5,97,0,0,255,256,5,110,0,
		0,256,82,1,0,0,0,257,258,5,112,0,0,258,259,5,114,0,0,259,260,5,105,0,0,
		260,261,5,110,0,0,261,262,5,116,0,0,262,263,5,108,0,0,263,264,5,110,0,
		0,264,84,1,0,0,0,265,266,5,114,0,0,266,267,5,101,0,0,267,268,5,116,0,0,
		268,269,5,117,0,0,269,270,5,114,0,0,270,271,5,110,0,0,271,86,1,0,0,0,272,
		273,5,116,0,0,273,274,5,114,0,0,274,275,5,117,0,0,275,282,5,101,0,0,276,
		277,5,102,0,0,277,278,5,97,0,0,278,279,5,108,0,0,279,280,5,115,0,0,280,
		282,5,101,0,0,281,272,1,0,0,0,281,276,1,0,0,0,282,88,1,0,0,0,283,285,7,
		1,0,0,284,283,1,0,0,0,285,90,1,0,0,0,286,288,7,2,0,0,287,286,1,0,0,0,288,
		289,1,0,0,0,289,287,1,0,0,0,289,290,1,0,0,0,290,92,1,0,0,0,291,293,7,2,
		0,0,292,291,1,0,0,0,293,294,1,0,0,0,294,292,1,0,0,0,294,295,1,0,0,0,295,
		296,1,0,0,0,296,298,5,46,0,0,297,299,7,2,0,0,298,297,1,0,0,0,299,300,1,
		0,0,0,300,298,1,0,0,0,300,301,1,0,0,0,301,94,1,0,0,0,302,304,3,89,44,0,
		303,302,1,0,0,0,304,305,1,0,0,0,305,303,1,0,0,0,305,306,1,0,0,0,306,310,
		1,0,0,0,307,309,3,91,45,0,308,307,1,0,0,0,309,312,1,0,0,0,310,308,1,0,
		0,0,310,311,1,0,0,0,311,316,1,0,0,0,312,310,1,0,0,0,313,315,3,89,44,0,
		314,313,1,0,0,0,315,318,1,0,0,0,316,314,1,0,0,0,316,317,1,0,0,0,317,96,
		1,0,0,0,318,316,1,0,0,0,16,0,100,169,172,176,178,186,195,281,284,289,294,
		300,305,310,316,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
