//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Token.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class TokenParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		WHITESPACE=1, NEWLINE=2, EPSILON=3, OPEN_PARENTHESIS=4, CLOSE_PARENTHESIS=5, 
		OPEN_BRACKET=6, CLOSE_BRACKET=7, OPEN_CURLYBRACKET=8, CLOSE_CURLYBRACKET=9, 
		COMMA=10, SEMICOLON=11, PLUS=12, MINUS=13, TIMES=14, DIV=15, MOD=16, NOT=17, 
		ATTRIBUTION=18, OR=19, AND=20, FUNC=21, COMP=22, COMMENT=23, TEXT=24, 
		IF=25, INT=26, FOR=27, CHAR=28, ELSE=29, MAIN=30, VOID=31, FLOAT=32, SCANF=33, 
		WHILE=34, BOOLEAN=35, PRINTLN=36, RETURN=37, BOOL=38, LETTER=39, INTEGER=40, 
		DECIMAL=41, ID=42;
	public const int
		RULE_programa = 0, RULE_funcoes = 1, RULE_dec_funcao = 2, RULE_tipo_retorno = 3, 
		RULE_tipo = 4, RULE_tipo_base = 5, RULE_dimensao = 6, RULE_parametros = 7, 
		RULE_novo_parametro = 8, RULE_principal = 9, RULE_bloco = 10, RULE_dec_variaveis = 11, 
		RULE_novo_id = 12, RULE_comandos = 13, RULE_comando = 14, RULE_leitura = 15, 
		RULE_escrita = 16, RULE_termo = 17, RULE_novo_termo = 18, RULE_selecao = 19, 
		RULE_senao = 20, RULE_enquanto = 21, RULE_atribuicao = 22, RULE_complemento = 23, 
		RULE_funcao = 24, RULE_argumentos = 25, RULE_novo_argumento = 26, RULE_retorno = 27, 
		RULE_expressao = 28, RULE_expr_ou = 29, RULE_expr_ou2 = 30, RULE_expr_e = 31, 
		RULE_expr_e2 = 32, RULE_expr_relacional = 33, RULE_expr_relacional2 = 34, 
		RULE_expr_aditiva = 35, RULE_expr_aditiva2 = 36, RULE_op_aditivo = 37, 
		RULE_expr_multiplicativa = 38, RULE_expr_multiplicativa2 = 39, RULE_op_multiplicativo = 40, 
		RULE_fator = 41, RULE_vetor = 42, RULE_constante = 43, RULE_sinal = 44;
	public static readonly string[] ruleNames = {
		"programa", "funcoes", "dec_funcao", "tipo_retorno", "tipo", "tipo_base", 
		"dimensao", "parametros", "novo_parametro", "principal", "bloco", "dec_variaveis", 
		"novo_id", "comandos", "comando", "leitura", "escrita", "termo", "novo_termo", 
		"selecao", "senao", "enquanto", "atribuicao", "complemento", "funcao", 
		"argumentos", "novo_argumento", "retorno", "expressao", "expr_ou", "expr_ou2", 
		"expr_e", "expr_e2", "expr_relacional", "expr_relacional2", "expr_aditiva", 
		"expr_aditiva2", "op_aditivo", "expr_multiplicativa", "expr_multiplicativa2", 
		"op_multiplicativo", "fator", "vetor", "constante", "sinal"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'('", "')'", "'['", "']'", "'{'", "'}'", "','", 
		"';'", "'+'", "'-'", "'*'", "'/'", "'%'", "'!'", "'='", "'||'", "'&&'", 
		"'func'", null, null, null, "'if'", "'int'", "'for'", "'char'", "'else'", 
		"'main'", "'void'", "'float'", "'scanf'", "'while'", "'boolean'", "'println'", 
		"'return'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WHITESPACE", "NEWLINE", "EPSILON", "OPEN_PARENTHESIS", "CLOSE_PARENTHESIS", 
		"OPEN_BRACKET", "CLOSE_BRACKET", "OPEN_CURLYBRACKET", "CLOSE_CURLYBRACKET", 
		"COMMA", "SEMICOLON", "PLUS", "MINUS", "TIMES", "DIV", "MOD", "NOT", "ATTRIBUTION", 
		"OR", "AND", "FUNC", "COMP", "COMMENT", "TEXT", "IF", "INT", "FOR", "CHAR", 
		"ELSE", "MAIN", "VOID", "FLOAT", "SCANF", "WHILE", "BOOLEAN", "PRINTLN", 
		"RETURN", "BOOL", "LETTER", "INTEGER", "DECIMAL", "ID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Token.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static TokenParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public TokenParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public TokenParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncoesContext funcoes() {
			return GetRuleContext<FuncoesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrincipalContext principal() {
			return GetRuleContext<PrincipalContext>(0);
		}
		public ProgramaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_programa; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterPrograma(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitPrograma(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrograma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramaContext programa() {
		ProgramaContext _localctx = new ProgramaContext(Context, State);
		EnterRule(_localctx, 0, RULE_programa);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			funcoes();
			State = 91;
			principal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncoesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Dec_funcaoContext dec_funcao() {
			return GetRuleContext<Dec_funcaoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncoesContext funcoes() {
			return GetRuleContext<FuncoesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EPSILON() { return GetToken(TokenParser.EPSILON, 0); }
		public FuncoesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcoes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterFuncoes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitFuncoes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncoes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncoesContext funcoes() {
		FuncoesContext _localctx = new FuncoesContext(Context, State);
		EnterRule(_localctx, 2, RULE_funcoes);
		try {
			State = 97;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
			case CHAR:
			case VOID:
			case FLOAT:
			case BOOLEAN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 93;
				dec_funcao();
				State = 94;
				funcoes();
				}
				break;
			case EPSILON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 96;
				Match(EPSILON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dec_funcaoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Tipo_retornoContext tipo_retorno() {
			return GetRuleContext<Tipo_retornoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(TokenParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENTHESIS() { return GetToken(TokenParser.OPEN_PARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParametrosContext parametros() {
			return GetRuleContext<ParametrosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENTHESIS() { return GetToken(TokenParser.CLOSE_PARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlocoContext bloco() {
			return GetRuleContext<BlocoContext>(0);
		}
		public Dec_funcaoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dec_funcao; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterDec_funcao(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitDec_funcao(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDec_funcao(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dec_funcaoContext dec_funcao() {
		Dec_funcaoContext _localctx = new Dec_funcaoContext(Context, State);
		EnterRule(_localctx, 4, RULE_dec_funcao);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			tipo_retorno();
			State = 100;
			Match(ID);
			State = 101;
			Match(OPEN_PARENTHESIS);
			State = 102;
			parametros();
			State = 103;
			Match(CLOSE_PARENTHESIS);
			State = 104;
			bloco();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tipo_retornoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TipoContext tipo() {
			return GetRuleContext<TipoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(TokenParser.VOID, 0); }
		public Tipo_retornoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tipo_retorno; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterTipo_retorno(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitTipo_retorno(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTipo_retorno(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tipo_retornoContext tipo_retorno() {
		Tipo_retornoContext _localctx = new Tipo_retornoContext(Context, State);
		EnterRule(_localctx, 6, RULE_tipo_retorno);
		try {
			State = 108;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
			case CHAR:
			case FLOAT:
			case BOOLEAN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 106;
				tipo();
				}
				break;
			case VOID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 107;
				Match(VOID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TipoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Tipo_baseContext tipo_base() {
			return GetRuleContext<Tipo_baseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DimensaoContext dimensao() {
			return GetRuleContext<DimensaoContext>(0);
		}
		public TipoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tipo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterTipo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitTipo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTipo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TipoContext tipo() {
		TipoContext _localctx = new TipoContext(Context, State);
		EnterRule(_localctx, 8, RULE_tipo);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110;
			tipo_base();
			State = 111;
			dimensao();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tipo_baseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(TokenParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(TokenParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(TokenParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(TokenParser.BOOLEAN, 0); }
		public Tipo_baseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tipo_base; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterTipo_base(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitTipo_base(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTipo_base(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tipo_baseContext tipo_base() {
		Tipo_baseContext _localctx = new Tipo_baseContext(Context, State);
		EnterRule(_localctx, 10, RULE_tipo_base);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << CHAR) | (1L << FLOAT) | (1L << BOOLEAN))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DimensaoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(TokenParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(TokenParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(TokenParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DimensaoContext dimensao() {
			return GetRuleContext<DimensaoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EPSILON() { return GetToken(TokenParser.EPSILON, 0); }
		public DimensaoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dimensao; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterDimensao(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitDimensao(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDimensao(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DimensaoContext dimensao() {
		DimensaoContext _localctx = new DimensaoContext(Context, State);
		EnterRule(_localctx, 12, RULE_dimensao);
		try {
			State = 120;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BRACKET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 115;
				Match(OPEN_BRACKET);
				State = 116;
				Match(INTEGER);
				State = 117;
				Match(CLOSE_BRACKET);
				State = 118;
				dimensao();
				}
				break;
			case EPSILON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 119;
				Match(EPSILON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametrosContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TipoContext tipo() {
			return GetRuleContext<TipoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(TokenParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Novo_parametroContext novo_parametro() {
			return GetRuleContext<Novo_parametroContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EPSILON() { return GetToken(TokenParser.EPSILON, 0); }
		public ParametrosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parametros; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterParametros(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitParametros(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParametros(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametrosContext parametros() {
		ParametrosContext _localctx = new ParametrosContext(Context, State);
		EnterRule(_localctx, 14, RULE_parametros);
		try {
			State = 127;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
			case CHAR:
			case FLOAT:
			case BOOLEAN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 122;
				tipo();
				State = 123;
				Match(ID);
				State = 124;
				novo_parametro();
				}
				break;
			case EPSILON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 126;
				Match(EPSILON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Novo_parametroContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(TokenParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TipoContext tipo() {
			return GetRuleContext<TipoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(TokenParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Novo_parametroContext novo_parametro() {
			return GetRuleContext<Novo_parametroContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EPSILON() { return GetToken(TokenParser.EPSILON, 0); }
		public Novo_parametroContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_novo_parametro; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterNovo_parametro(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitNovo_parametro(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNovo_parametro(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Novo_parametroContext novo_parametro() {
		Novo_parametroContext _localctx = new Novo_parametroContext(Context, State);
		EnterRule(_localctx, 16, RULE_novo_parametro);
		try {
			State = 135;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COMMA:
				EnterOuterAlt(_localctx, 1);
				{
				State = 129;
				Match(COMMA);
				State = 130;
				tipo();
				State = 131;
				Match(ID);
				State = 132;
				novo_parametro();
				}
				break;
			case EPSILON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 134;
				Match(EPSILON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrincipalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAIN() { return GetToken(TokenParser.MAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENTHESIS() { return GetToken(TokenParser.OPEN_PARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENTHESIS() { return GetToken(TokenParser.CLOSE_PARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlocoContext bloco() {
			return GetRuleContext<BlocoContext>(0);
		}
		public PrincipalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_principal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterPrincipal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitPrincipal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrincipal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrincipalContext principal() {
		PrincipalContext _localctx = new PrincipalContext(Context, State);
		EnterRule(_localctx, 18, RULE_principal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137;
			Match(MAIN);
			State = 138;
			Match(OPEN_PARENTHESIS);
			State = 139;
			Match(CLOSE_PARENTHESIS);
			State = 140;
			bloco();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlocoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_CURLYBRACKET() { return GetToken(TokenParser.OPEN_CURLYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Dec_variaveisContext dec_variaveis() {
			return GetRuleContext<Dec_variaveisContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComandosContext comandos() {
			return GetRuleContext<ComandosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_CURLYBRACKET() { return GetToken(TokenParser.CLOSE_CURLYBRACKET, 0); }
		public BlocoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bloco; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterBloco(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitBloco(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBloco(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlocoContext bloco() {
		BlocoContext _localctx = new BlocoContext(Context, State);
		EnterRule(_localctx, 20, RULE_bloco);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142;
			Match(OPEN_CURLYBRACKET);
			State = 143;
			dec_variaveis();
			State = 144;
			comandos();
			State = 145;
			Match(CLOSE_CURLYBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dec_variaveisContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TipoContext tipo() {
			return GetRuleContext<TipoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(TokenParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Novo_idContext novo_id() {
			return GetRuleContext<Novo_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(TokenParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Dec_variaveisContext dec_variaveis() {
			return GetRuleContext<Dec_variaveisContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EPSILON() { return GetToken(TokenParser.EPSILON, 0); }
		public Dec_variaveisContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dec_variaveis; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterDec_variaveis(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitDec_variaveis(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDec_variaveis(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dec_variaveisContext dec_variaveis() {
		Dec_variaveisContext _localctx = new Dec_variaveisContext(Context, State);
		EnterRule(_localctx, 22, RULE_dec_variaveis);
		try {
			State = 154;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
			case CHAR:
			case FLOAT:
			case BOOLEAN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 147;
				tipo();
				State = 148;
				Match(ID);
				State = 149;
				novo_id();
				State = 150;
				Match(SEMICOLON);
				State = 151;
				dec_variaveis();
				}
				break;
			case EPSILON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 153;
				Match(EPSILON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Novo_idContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(TokenParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(TokenParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Novo_idContext novo_id() {
			return GetRuleContext<Novo_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EPSILON() { return GetToken(TokenParser.EPSILON, 0); }
		public Novo_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_novo_id; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterNovo_id(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitNovo_id(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNovo_id(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Novo_idContext novo_id() {
		Novo_idContext _localctx = new Novo_idContext(Context, State);
		EnterRule(_localctx, 24, RULE_novo_id);
		try {
			State = 160;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COMMA:
				EnterOuterAlt(_localctx, 1);
				{
				State = 156;
				Match(COMMA);
				State = 157;
				Match(ID);
				State = 158;
				novo_id();
				}
				break;
			case EPSILON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 159;
				Match(EPSILON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComandosContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ComandoContext comando() {
			return GetRuleContext<ComandoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComandosContext comandos() {
			return GetRuleContext<ComandosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EPSILON() { return GetToken(TokenParser.EPSILON, 0); }
		public ComandosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comandos; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterComandos(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitComandos(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComandos(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComandosContext comandos() {
		ComandosContext _localctx = new ComandosContext(Context, State);
		EnterRule(_localctx, 26, RULE_comandos);
		try {
			State = 166;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 162;
				comando();
				State = 163;
				comandos();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 165;
				Match(EPSILON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComandoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LeituraContext leitura() {
			return GetRuleContext<LeituraContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EscritaContext escrita() {
			return GetRuleContext<EscritaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtribuicaoContext atribuicao() {
			return GetRuleContext<AtribuicaoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncaoContext funcao() {
			return GetRuleContext<FuncaoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelecaoContext selecao() {
			return GetRuleContext<SelecaoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnquantoContext enquanto() {
			return GetRuleContext<EnquantoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RetornoContext retorno() {
			return GetRuleContext<RetornoContext>(0);
		}
		public ComandoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comando; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterComando(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitComando(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComando(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComandoContext comando() {
		ComandoContext _localctx = new ComandoContext(Context, State);
		EnterRule(_localctx, 28, RULE_comando);
		try {
			State = 175;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SCANF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 168;
				leitura();
				}
				break;
			case PRINTLN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 169;
				escrita();
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 170;
				atribuicao();
				}
				break;
			case FUNC:
				EnterOuterAlt(_localctx, 4);
				{
				State = 171;
				funcao();
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 5);
				{
				State = 172;
				selecao();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 173;
				enquanto();
				}
				break;
			case EPSILON:
			case RETURN:
				EnterOuterAlt(_localctx, 7);
				{
				State = 174;
				retorno();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeituraContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCANF() { return GetToken(TokenParser.SCANF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENTHESIS() { return GetToken(TokenParser.OPEN_PARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(TokenParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Novo_idContext novo_id() {
			return GetRuleContext<Novo_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENTHESIS() { return GetToken(TokenParser.CLOSE_PARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(TokenParser.SEMICOLON, 0); }
		public LeituraContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leitura; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterLeitura(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitLeitura(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeitura(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LeituraContext leitura() {
		LeituraContext _localctx = new LeituraContext(Context, State);
		EnterRule(_localctx, 30, RULE_leitura);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177;
			Match(SCANF);
			State = 178;
			Match(OPEN_PARENTHESIS);
			State = 179;
			Match(ID);
			State = 180;
			novo_id();
			State = 181;
			Match(CLOSE_PARENTHESIS);
			State = 182;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EscritaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINTLN() { return GetToken(TokenParser.PRINTLN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENTHESIS() { return GetToken(TokenParser.OPEN_PARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermoContext termo() {
			return GetRuleContext<TermoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Novo_termoContext novo_termo() {
			return GetRuleContext<Novo_termoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENTHESIS() { return GetToken(TokenParser.CLOSE_PARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(TokenParser.SEMICOLON, 0); }
		public EscritaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_escrita; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterEscrita(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitEscrita(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEscrita(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EscritaContext escrita() {
		EscritaContext _localctx = new EscritaContext(Context, State);
		EnterRule(_localctx, 32, RULE_escrita);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184;
			Match(PRINTLN);
			State = 185;
			Match(OPEN_PARENTHESIS);
			State = 186;
			termo();
			State = 187;
			novo_termo();
			State = 188;
			Match(CLOSE_PARENTHESIS);
			State = 189;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(TokenParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstanteContext constante() {
			return GetRuleContext<ConstanteContext>(0);
		}
		public TermoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_termo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterTermo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitTermo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTermo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermoContext termo() {
		TermoContext _localctx = new TermoContext(Context, State);
		EnterRule(_localctx, 34, RULE_termo);
		try {
			State = 193;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 191;
				Match(ID);
				}
				break;
			case EPSILON:
			case PLUS:
			case MINUS:
			case TEXT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 192;
				constante();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Novo_termoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(TokenParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermoContext termo() {
			return GetRuleContext<TermoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Novo_termoContext novo_termo() {
			return GetRuleContext<Novo_termoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EPSILON() { return GetToken(TokenParser.EPSILON, 0); }
		public Novo_termoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_novo_termo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterNovo_termo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitNovo_termo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNovo_termo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Novo_termoContext novo_termo() {
		Novo_termoContext _localctx = new Novo_termoContext(Context, State);
		EnterRule(_localctx, 36, RULE_novo_termo);
		try {
			State = 200;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COMMA:
				EnterOuterAlt(_localctx, 1);
				{
				State = 195;
				Match(COMMA);
				State = 196;
				termo();
				State = 197;
				novo_termo();
				}
				break;
			case EPSILON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 199;
				Match(EPSILON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelecaoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(TokenParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENTHESIS() { return GetToken(TokenParser.OPEN_PARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressaoContext expressao() {
			return GetRuleContext<ExpressaoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENTHESIS() { return GetToken(TokenParser.CLOSE_PARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlocoContext bloco() {
			return GetRuleContext<BlocoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SenaoContext senao() {
			return GetRuleContext<SenaoContext>(0);
		}
		public SelecaoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selecao; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterSelecao(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitSelecao(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelecao(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelecaoContext selecao() {
		SelecaoContext _localctx = new SelecaoContext(Context, State);
		EnterRule(_localctx, 38, RULE_selecao);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202;
			Match(IF);
			State = 203;
			Match(OPEN_PARENTHESIS);
			State = 204;
			expressao();
			State = 205;
			Match(CLOSE_PARENTHESIS);
			State = 206;
			bloco();
			State = 207;
			senao();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SenaoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(TokenParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlocoContext bloco() {
			return GetRuleContext<BlocoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EPSILON() { return GetToken(TokenParser.EPSILON, 0); }
		public SenaoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_senao; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterSenao(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitSenao(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSenao(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SenaoContext senao() {
		SenaoContext _localctx = new SenaoContext(Context, State);
		EnterRule(_localctx, 40, RULE_senao);
		try {
			State = 212;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ELSE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 209;
				Match(ELSE);
				State = 210;
				bloco();
				}
				break;
			case EPSILON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 211;
				Match(EPSILON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnquantoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(TokenParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENTHESIS() { return GetToken(TokenParser.OPEN_PARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressaoContext expressao() {
			return GetRuleContext<ExpressaoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENTHESIS() { return GetToken(TokenParser.CLOSE_PARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlocoContext bloco() {
			return GetRuleContext<BlocoContext>(0);
		}
		public EnquantoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enquanto; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterEnquanto(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitEnquanto(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnquanto(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnquantoContext enquanto() {
		EnquantoContext _localctx = new EnquantoContext(Context, State);
		EnterRule(_localctx, 42, RULE_enquanto);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214;
			Match(WHILE);
			State = 215;
			Match(OPEN_PARENTHESIS);
			State = 216;
			expressao();
			State = 217;
			Match(CLOSE_PARENTHESIS);
			State = 218;
			bloco();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtribuicaoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(TokenParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTRIBUTION() { return GetToken(TokenParser.ATTRIBUTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ComplementoContext complemento() {
			return GetRuleContext<ComplementoContext>(0);
		}
		public AtribuicaoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atribuicao; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterAtribuicao(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitAtribuicao(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtribuicao(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtribuicaoContext atribuicao() {
		AtribuicaoContext _localctx = new AtribuicaoContext(Context, State);
		EnterRule(_localctx, 44, RULE_atribuicao);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 220;
			Match(ID);
			State = 221;
			Match(ATTRIBUTION);
			State = 222;
			complemento();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplementoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressaoContext expressao() {
			return GetRuleContext<ExpressaoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(TokenParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FuncaoContext funcao() {
			return GetRuleContext<FuncaoContext>(0);
		}
		public ComplementoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complemento; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterComplemento(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitComplemento(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplemento(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComplementoContext complemento() {
		ComplementoContext _localctx = new ComplementoContext(Context, State);
		EnterRule(_localctx, 46, RULE_complemento);
		try {
			State = 230;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EPSILON:
			case OPEN_PARENTHESIS:
			case PLUS:
			case MINUS:
			case NOT:
			case TEXT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 224;
				expressao();
				State = 225;
				Match(SEMICOLON);
				}
				break;
			case FUNC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 227;
				funcao();
				State = 228;
				Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncaoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC() { return GetToken(TokenParser.FUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(TokenParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENTHESIS() { return GetToken(TokenParser.OPEN_PARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentosContext argumentos() {
			return GetRuleContext<ArgumentosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENTHESIS() { return GetToken(TokenParser.CLOSE_PARENTHESIS, 0); }
		public FuncaoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcao; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterFuncao(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitFuncao(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncao(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncaoContext funcao() {
		FuncaoContext _localctx = new FuncaoContext(Context, State);
		EnterRule(_localctx, 48, RULE_funcao);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 232;
			Match(FUNC);
			State = 233;
			Match(ID);
			State = 234;
			Match(OPEN_PARENTHESIS);
			State = 235;
			argumentos();
			State = 236;
			Match(CLOSE_PARENTHESIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentosContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressaoContext expressao() {
			return GetRuleContext<ExpressaoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Novo_argumentoContext novo_argumento() {
			return GetRuleContext<Novo_argumentoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EPSILON() { return GetToken(TokenParser.EPSILON, 0); }
		public ArgumentosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentos; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterArgumentos(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitArgumentos(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentos(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentosContext argumentos() {
		ArgumentosContext _localctx = new ArgumentosContext(Context, State);
		EnterRule(_localctx, 50, RULE_argumentos);
		try {
			State = 242;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 238;
				expressao();
				State = 239;
				novo_argumento();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 241;
				Match(EPSILON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Novo_argumentoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(TokenParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressaoContext expressao() {
			return GetRuleContext<ExpressaoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Novo_argumentoContext novo_argumento() {
			return GetRuleContext<Novo_argumentoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EPSILON() { return GetToken(TokenParser.EPSILON, 0); }
		public Novo_argumentoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_novo_argumento; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterNovo_argumento(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitNovo_argumento(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNovo_argumento(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Novo_argumentoContext novo_argumento() {
		Novo_argumentoContext _localctx = new Novo_argumentoContext(Context, State);
		EnterRule(_localctx, 52, RULE_novo_argumento);
		try {
			State = 249;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COMMA:
				EnterOuterAlt(_localctx, 1);
				{
				State = 244;
				Match(COMMA);
				State = 245;
				expressao();
				State = 246;
				novo_argumento();
				}
				break;
			case EPSILON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 248;
				Match(EPSILON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RetornoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(TokenParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressaoContext expressao() {
			return GetRuleContext<ExpressaoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(TokenParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EPSILON() { return GetToken(TokenParser.EPSILON, 0); }
		public RetornoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_retorno; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterRetorno(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitRetorno(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRetorno(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RetornoContext retorno() {
		RetornoContext _localctx = new RetornoContext(Context, State);
		EnterRule(_localctx, 54, RULE_retorno);
		try {
			State = 256;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RETURN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 251;
				Match(RETURN);
				State = 252;
				expressao();
				State = 253;
				Match(SEMICOLON);
				}
				break;
			case EPSILON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 255;
				Match(EPSILON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressaoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expr_ouContext expr_ou() {
			return GetRuleContext<Expr_ouContext>(0);
		}
		public ExpressaoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressao; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterExpressao(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitExpressao(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressao(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressaoContext expressao() {
		ExpressaoContext _localctx = new ExpressaoContext(Context, State);
		EnterRule(_localctx, 56, RULE_expressao);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 258;
			expr_ou();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_ouContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expr_eContext expr_e() {
			return GetRuleContext<Expr_eContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_ou2Context expr_ou2() {
			return GetRuleContext<Expr_ou2Context>(0);
		}
		public Expr_ouContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_ou; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterExpr_ou(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitExpr_ou(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_ou(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expr_ouContext expr_ou() {
		Expr_ouContext _localctx = new Expr_ouContext(Context, State);
		EnterRule(_localctx, 58, RULE_expr_ou);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 260;
			expr_e();
			State = 261;
			expr_ou2();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_ou2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(TokenParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_eContext expr_e() {
			return GetRuleContext<Expr_eContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_ou2Context expr_ou2() {
			return GetRuleContext<Expr_ou2Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EPSILON() { return GetToken(TokenParser.EPSILON, 0); }
		public Expr_ou2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_ou2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterExpr_ou2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitExpr_ou2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_ou2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expr_ou2Context expr_ou2() {
		Expr_ou2Context _localctx = new Expr_ou2Context(Context, State);
		EnterRule(_localctx, 60, RULE_expr_ou2);
		try {
			State = 268;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 263;
				Match(OR);
				State = 264;
				expr_e();
				State = 265;
				expr_ou2();
				}
				break;
			case EPSILON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 267;
				Match(EPSILON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_eContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expr_relacionalContext expr_relacional() {
			return GetRuleContext<Expr_relacionalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_e2Context expr_e2() {
			return GetRuleContext<Expr_e2Context>(0);
		}
		public Expr_eContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_e; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterExpr_e(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitExpr_e(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_e(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expr_eContext expr_e() {
		Expr_eContext _localctx = new Expr_eContext(Context, State);
		EnterRule(_localctx, 62, RULE_expr_e);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 270;
			expr_relacional();
			State = 271;
			expr_e2();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_e2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(TokenParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_relacionalContext expr_relacional() {
			return GetRuleContext<Expr_relacionalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_e2Context expr_e2() {
			return GetRuleContext<Expr_e2Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EPSILON() { return GetToken(TokenParser.EPSILON, 0); }
		public Expr_e2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_e2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterExpr_e2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitExpr_e2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_e2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expr_e2Context expr_e2() {
		Expr_e2Context _localctx = new Expr_e2Context(Context, State);
		EnterRule(_localctx, 64, RULE_expr_e2);
		try {
			State = 278;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
				EnterOuterAlt(_localctx, 1);
				{
				State = 273;
				Match(AND);
				State = 274;
				expr_relacional();
				State = 275;
				expr_e2();
				}
				break;
			case EPSILON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 277;
				Match(EPSILON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_relacionalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expr_aditivaContext expr_aditiva() {
			return GetRuleContext<Expr_aditivaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_relacional2Context expr_relacional2() {
			return GetRuleContext<Expr_relacional2Context>(0);
		}
		public Expr_relacionalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_relacional; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterExpr_relacional(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitExpr_relacional(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_relacional(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expr_relacionalContext expr_relacional() {
		Expr_relacionalContext _localctx = new Expr_relacionalContext(Context, State);
		EnterRule(_localctx, 66, RULE_expr_relacional);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 280;
			expr_aditiva();
			State = 281;
			expr_relacional2();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_relacional2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMP() { return GetToken(TokenParser.COMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_aditivaContext expr_aditiva() {
			return GetRuleContext<Expr_aditivaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_relacional2Context expr_relacional2() {
			return GetRuleContext<Expr_relacional2Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EPSILON() { return GetToken(TokenParser.EPSILON, 0); }
		public Expr_relacional2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_relacional2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterExpr_relacional2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitExpr_relacional2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_relacional2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expr_relacional2Context expr_relacional2() {
		Expr_relacional2Context _localctx = new Expr_relacional2Context(Context, State);
		EnterRule(_localctx, 68, RULE_expr_relacional2);
		try {
			State = 288;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COMP:
				EnterOuterAlt(_localctx, 1);
				{
				State = 283;
				Match(COMP);
				State = 284;
				expr_aditiva();
				State = 285;
				expr_relacional2();
				}
				break;
			case EPSILON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 287;
				Match(EPSILON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_aditivaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expr_multiplicativaContext expr_multiplicativa() {
			return GetRuleContext<Expr_multiplicativaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_aditiva2Context expr_aditiva2() {
			return GetRuleContext<Expr_aditiva2Context>(0);
		}
		public Expr_aditivaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_aditiva; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterExpr_aditiva(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitExpr_aditiva(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_aditiva(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expr_aditivaContext expr_aditiva() {
		Expr_aditivaContext _localctx = new Expr_aditivaContext(Context, State);
		EnterRule(_localctx, 70, RULE_expr_aditiva);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 290;
			expr_multiplicativa();
			State = 291;
			expr_aditiva2();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_aditiva2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Op_aditivoContext op_aditivo() {
			return GetRuleContext<Op_aditivoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_multiplicativaContext expr_multiplicativa() {
			return GetRuleContext<Expr_multiplicativaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_aditiva2Context expr_aditiva2() {
			return GetRuleContext<Expr_aditiva2Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EPSILON() { return GetToken(TokenParser.EPSILON, 0); }
		public Expr_aditiva2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_aditiva2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterExpr_aditiva2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitExpr_aditiva2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_aditiva2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expr_aditiva2Context expr_aditiva2() {
		Expr_aditiva2Context _localctx = new Expr_aditiva2Context(Context, State);
		EnterRule(_localctx, 72, RULE_expr_aditiva2);
		try {
			State = 298;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PLUS:
			case MINUS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 293;
				op_aditivo();
				State = 294;
				expr_multiplicativa();
				State = 295;
				expr_aditiva2();
				}
				break;
			case EPSILON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 297;
				Match(EPSILON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_aditivoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(TokenParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(TokenParser.MINUS, 0); }
		public Op_aditivoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_aditivo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterOp_aditivo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitOp_aditivo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_aditivo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_aditivoContext op_aditivo() {
		Op_aditivoContext _localctx = new Op_aditivoContext(Context, State);
		EnterRule(_localctx, 74, RULE_op_aditivo);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 300;
			_la = TokenStream.LA(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_multiplicativaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FatorContext fator() {
			return GetRuleContext<FatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_multiplicativa2Context expr_multiplicativa2() {
			return GetRuleContext<Expr_multiplicativa2Context>(0);
		}
		public Expr_multiplicativaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_multiplicativa; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterExpr_multiplicativa(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitExpr_multiplicativa(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_multiplicativa(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expr_multiplicativaContext expr_multiplicativa() {
		Expr_multiplicativaContext _localctx = new Expr_multiplicativaContext(Context, State);
		EnterRule(_localctx, 76, RULE_expr_multiplicativa);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 302;
			fator();
			State = 303;
			expr_multiplicativa2();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_multiplicativa2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Op_multiplicativoContext op_multiplicativo() {
			return GetRuleContext<Op_multiplicativoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FatorContext fator() {
			return GetRuleContext<FatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_multiplicativa2Context expr_multiplicativa2() {
			return GetRuleContext<Expr_multiplicativa2Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EPSILON() { return GetToken(TokenParser.EPSILON, 0); }
		public Expr_multiplicativa2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_multiplicativa2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterExpr_multiplicativa2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitExpr_multiplicativa2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_multiplicativa2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expr_multiplicativa2Context expr_multiplicativa2() {
		Expr_multiplicativa2Context _localctx = new Expr_multiplicativa2Context(Context, State);
		EnterRule(_localctx, 78, RULE_expr_multiplicativa2);
		try {
			State = 310;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TIMES:
			case DIV:
			case MOD:
				EnterOuterAlt(_localctx, 1);
				{
				State = 305;
				op_multiplicativo();
				State = 306;
				fator();
				State = 307;
				expr_multiplicativa2();
				}
				break;
			case EPSILON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 309;
				Match(EPSILON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_multiplicativoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMES() { return GetToken(TokenParser.TIMES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(TokenParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(TokenParser.MOD, 0); }
		public Op_multiplicativoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_multiplicativo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterOp_multiplicativo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitOp_multiplicativo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_multiplicativo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_multiplicativoContext op_multiplicativo() {
		Op_multiplicativoContext _localctx = new Op_multiplicativoContext(Context, State);
		EnterRule(_localctx, 80, RULE_op_multiplicativo);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 312;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TIMES) | (1L << DIV) | (1L << MOD))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SinalContext sinal() {
			return GetRuleContext<SinalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(TokenParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VetorContext vetor() {
			return GetRuleContext<VetorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstanteContext constante() {
			return GetRuleContext<ConstanteContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(TokenParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FatorContext fator() {
			return GetRuleContext<FatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENTHESIS() { return GetToken(TokenParser.OPEN_PARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressaoContext expressao() {
			return GetRuleContext<ExpressaoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENTHESIS() { return GetToken(TokenParser.CLOSE_PARENTHESIS, 0); }
		public FatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterFator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitFator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FatorContext fator() {
		FatorContext _localctx = new FatorContext(Context, State);
		EnterRule(_localctx, 82, RULE_fator);
		try {
			State = 325;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 314;
				sinal();
				State = 315;
				Match(ID);
				State = 316;
				vetor();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 318;
				constante();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 319;
				Match(NOT);
				State = 320;
				fator();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 321;
				Match(OPEN_PARENTHESIS);
				State = 322;
				expressao();
				State = 323;
				Match(CLOSE_PARENTHESIS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VetorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(TokenParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_aditivaContext expr_aditiva() {
			return GetRuleContext<Expr_aditivaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(TokenParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EPSILON() { return GetToken(TokenParser.EPSILON, 0); }
		public VetorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vetor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterVetor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitVetor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVetor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VetorContext vetor() {
		VetorContext _localctx = new VetorContext(Context, State);
		EnterRule(_localctx, 84, RULE_vetor);
		try {
			State = 332;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BRACKET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 327;
				Match(OPEN_BRACKET);
				State = 328;
				expr_aditiva();
				State = 329;
				Match(CLOSE_BRACKET);
				}
				break;
			case EPSILON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 331;
				Match(EPSILON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstanteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SinalContext sinal() {
			return GetRuleContext<SinalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(TokenParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(TokenParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(TokenParser.TEXT, 0); }
		public ConstanteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constante; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterConstante(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitConstante(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstante(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstanteContext constante() {
		ConstanteContext _localctx = new ConstanteContext(Context, State);
		EnterRule(_localctx, 86, RULE_constante);
		try {
			State = 341;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 334;
				sinal();
				State = 335;
				Match(INTEGER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 337;
				sinal();
				State = 338;
				Match(DECIMAL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 340;
				Match(TEXT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SinalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(TokenParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(TokenParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EPSILON() { return GetToken(TokenParser.EPSILON, 0); }
		public SinalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sinal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterSinal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitSinal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSinal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SinalContext sinal() {
		SinalContext _localctx = new SinalContext(Context, State);
		EnterRule(_localctx, 88, RULE_sinal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 343;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EPSILON) | (1L << PLUS) | (1L << MINUS))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,42,346,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,1,0,1,0,1,0,1,1,1,1,1,1,1,1,3,1,98,8,1,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,3,1,3,3,3,109,8,3,1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,
		6,1,6,3,6,121,8,6,1,7,1,7,1,7,1,7,1,7,3,7,128,8,7,1,8,1,8,1,8,1,8,1,8,
		1,8,3,8,136,8,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,
		1,11,1,11,1,11,1,11,1,11,3,11,155,8,11,1,12,1,12,1,12,1,12,3,12,161,8,
		12,1,13,1,13,1,13,1,13,3,13,167,8,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
		3,14,176,8,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,
		16,1,16,1,16,1,17,1,17,3,17,194,8,17,1,18,1,18,1,18,1,18,1,18,3,18,201,
		8,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,3,20,213,8,20,1,
		21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,
		23,1,23,3,23,231,8,23,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,
		3,25,243,8,25,1,26,1,26,1,26,1,26,1,26,3,26,250,8,26,1,27,1,27,1,27,1,
		27,1,27,3,27,257,8,27,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,
		3,30,269,8,30,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,3,32,279,8,32,1,
		33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,3,34,289,8,34,1,35,1,35,1,35,1,36,
		1,36,1,36,1,36,1,36,3,36,299,8,36,1,37,1,37,1,38,1,38,1,38,1,39,1,39,1,
		39,1,39,1,39,3,39,311,8,39,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,
		1,41,1,41,1,41,1,41,3,41,326,8,41,1,42,1,42,1,42,1,42,1,42,3,42,333,8,
		42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,3,43,342,8,43,1,44,1,44,1,44,0,0,
		45,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,
		48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,0,4,4,0,
		26,26,28,28,32,32,35,35,1,0,12,13,1,0,14,16,2,0,3,3,12,13,332,0,90,1,0,
		0,0,2,97,1,0,0,0,4,99,1,0,0,0,6,108,1,0,0,0,8,110,1,0,0,0,10,113,1,0,0,
		0,12,120,1,0,0,0,14,127,1,0,0,0,16,135,1,0,0,0,18,137,1,0,0,0,20,142,1,
		0,0,0,22,154,1,0,0,0,24,160,1,0,0,0,26,166,1,0,0,0,28,175,1,0,0,0,30,177,
		1,0,0,0,32,184,1,0,0,0,34,193,1,0,0,0,36,200,1,0,0,0,38,202,1,0,0,0,40,
		212,1,0,0,0,42,214,1,0,0,0,44,220,1,0,0,0,46,230,1,0,0,0,48,232,1,0,0,
		0,50,242,1,0,0,0,52,249,1,0,0,0,54,256,1,0,0,0,56,258,1,0,0,0,58,260,1,
		0,0,0,60,268,1,0,0,0,62,270,1,0,0,0,64,278,1,0,0,0,66,280,1,0,0,0,68,288,
		1,0,0,0,70,290,1,0,0,0,72,298,1,0,0,0,74,300,1,0,0,0,76,302,1,0,0,0,78,
		310,1,0,0,0,80,312,1,0,0,0,82,325,1,0,0,0,84,332,1,0,0,0,86,341,1,0,0,
		0,88,343,1,0,0,0,90,91,3,2,1,0,91,92,3,18,9,0,92,1,1,0,0,0,93,94,3,4,2,
		0,94,95,3,2,1,0,95,98,1,0,0,0,96,98,5,3,0,0,97,93,1,0,0,0,97,96,1,0,0,
		0,98,3,1,0,0,0,99,100,3,6,3,0,100,101,5,42,0,0,101,102,5,4,0,0,102,103,
		3,14,7,0,103,104,5,5,0,0,104,105,3,20,10,0,105,5,1,0,0,0,106,109,3,8,4,
		0,107,109,5,31,0,0,108,106,1,0,0,0,108,107,1,0,0,0,109,7,1,0,0,0,110,111,
		3,10,5,0,111,112,3,12,6,0,112,9,1,0,0,0,113,114,7,0,0,0,114,11,1,0,0,0,
		115,116,5,6,0,0,116,117,5,40,0,0,117,118,5,7,0,0,118,121,3,12,6,0,119,
		121,5,3,0,0,120,115,1,0,0,0,120,119,1,0,0,0,121,13,1,0,0,0,122,123,3,8,
		4,0,123,124,5,42,0,0,124,125,3,16,8,0,125,128,1,0,0,0,126,128,5,3,0,0,
		127,122,1,0,0,0,127,126,1,0,0,0,128,15,1,0,0,0,129,130,5,10,0,0,130,131,
		3,8,4,0,131,132,5,42,0,0,132,133,3,16,8,0,133,136,1,0,0,0,134,136,5,3,
		0,0,135,129,1,0,0,0,135,134,1,0,0,0,136,17,1,0,0,0,137,138,5,30,0,0,138,
		139,5,4,0,0,139,140,5,5,0,0,140,141,3,20,10,0,141,19,1,0,0,0,142,143,5,
		8,0,0,143,144,3,22,11,0,144,145,3,26,13,0,145,146,5,9,0,0,146,21,1,0,0,
		0,147,148,3,8,4,0,148,149,5,42,0,0,149,150,3,24,12,0,150,151,5,11,0,0,
		151,152,3,22,11,0,152,155,1,0,0,0,153,155,5,3,0,0,154,147,1,0,0,0,154,
		153,1,0,0,0,155,23,1,0,0,0,156,157,5,10,0,0,157,158,5,42,0,0,158,161,3,
		24,12,0,159,161,5,3,0,0,160,156,1,0,0,0,160,159,1,0,0,0,161,25,1,0,0,0,
		162,163,3,28,14,0,163,164,3,26,13,0,164,167,1,0,0,0,165,167,5,3,0,0,166,
		162,1,0,0,0,166,165,1,0,0,0,167,27,1,0,0,0,168,176,3,30,15,0,169,176,3,
		32,16,0,170,176,3,44,22,0,171,176,3,48,24,0,172,176,3,38,19,0,173,176,
		3,42,21,0,174,176,3,54,27,0,175,168,1,0,0,0,175,169,1,0,0,0,175,170,1,
		0,0,0,175,171,1,0,0,0,175,172,1,0,0,0,175,173,1,0,0,0,175,174,1,0,0,0,
		176,29,1,0,0,0,177,178,5,33,0,0,178,179,5,4,0,0,179,180,5,42,0,0,180,181,
		3,24,12,0,181,182,5,5,0,0,182,183,5,11,0,0,183,31,1,0,0,0,184,185,5,36,
		0,0,185,186,5,4,0,0,186,187,3,34,17,0,187,188,3,36,18,0,188,189,5,5,0,
		0,189,190,5,11,0,0,190,33,1,0,0,0,191,194,5,42,0,0,192,194,3,86,43,0,193,
		191,1,0,0,0,193,192,1,0,0,0,194,35,1,0,0,0,195,196,5,10,0,0,196,197,3,
		34,17,0,197,198,3,36,18,0,198,201,1,0,0,0,199,201,5,3,0,0,200,195,1,0,
		0,0,200,199,1,0,0,0,201,37,1,0,0,0,202,203,5,25,0,0,203,204,5,4,0,0,204,
		205,3,56,28,0,205,206,5,5,0,0,206,207,3,20,10,0,207,208,3,40,20,0,208,
		39,1,0,0,0,209,210,5,29,0,0,210,213,3,20,10,0,211,213,5,3,0,0,212,209,
		1,0,0,0,212,211,1,0,0,0,213,41,1,0,0,0,214,215,5,34,0,0,215,216,5,4,0,
		0,216,217,3,56,28,0,217,218,5,5,0,0,218,219,3,20,10,0,219,43,1,0,0,0,220,
		221,5,42,0,0,221,222,5,18,0,0,222,223,3,46,23,0,223,45,1,0,0,0,224,225,
		3,56,28,0,225,226,5,11,0,0,226,231,1,0,0,0,227,228,3,48,24,0,228,229,5,
		11,0,0,229,231,1,0,0,0,230,224,1,0,0,0,230,227,1,0,0,0,231,47,1,0,0,0,
		232,233,5,21,0,0,233,234,5,42,0,0,234,235,5,4,0,0,235,236,3,50,25,0,236,
		237,5,5,0,0,237,49,1,0,0,0,238,239,3,56,28,0,239,240,3,52,26,0,240,243,
		1,0,0,0,241,243,5,3,0,0,242,238,1,0,0,0,242,241,1,0,0,0,243,51,1,0,0,0,
		244,245,5,10,0,0,245,246,3,56,28,0,246,247,3,52,26,0,247,250,1,0,0,0,248,
		250,5,3,0,0,249,244,1,0,0,0,249,248,1,0,0,0,250,53,1,0,0,0,251,252,5,37,
		0,0,252,253,3,56,28,0,253,254,5,11,0,0,254,257,1,0,0,0,255,257,5,3,0,0,
		256,251,1,0,0,0,256,255,1,0,0,0,257,55,1,0,0,0,258,259,3,58,29,0,259,57,
		1,0,0,0,260,261,3,62,31,0,261,262,3,60,30,0,262,59,1,0,0,0,263,264,5,19,
		0,0,264,265,3,62,31,0,265,266,3,60,30,0,266,269,1,0,0,0,267,269,5,3,0,
		0,268,263,1,0,0,0,268,267,1,0,0,0,269,61,1,0,0,0,270,271,3,66,33,0,271,
		272,3,64,32,0,272,63,1,0,0,0,273,274,5,20,0,0,274,275,3,66,33,0,275,276,
		3,64,32,0,276,279,1,0,0,0,277,279,5,3,0,0,278,273,1,0,0,0,278,277,1,0,
		0,0,279,65,1,0,0,0,280,281,3,70,35,0,281,282,3,68,34,0,282,67,1,0,0,0,
		283,284,5,22,0,0,284,285,3,70,35,0,285,286,3,68,34,0,286,289,1,0,0,0,287,
		289,5,3,0,0,288,283,1,0,0,0,288,287,1,0,0,0,289,69,1,0,0,0,290,291,3,76,
		38,0,291,292,3,72,36,0,292,71,1,0,0,0,293,294,3,74,37,0,294,295,3,76,38,
		0,295,296,3,72,36,0,296,299,1,0,0,0,297,299,5,3,0,0,298,293,1,0,0,0,298,
		297,1,0,0,0,299,73,1,0,0,0,300,301,7,1,0,0,301,75,1,0,0,0,302,303,3,82,
		41,0,303,304,3,78,39,0,304,77,1,0,0,0,305,306,3,80,40,0,306,307,3,82,41,
		0,307,308,3,78,39,0,308,311,1,0,0,0,309,311,5,3,0,0,310,305,1,0,0,0,310,
		309,1,0,0,0,311,79,1,0,0,0,312,313,7,2,0,0,313,81,1,0,0,0,314,315,3,88,
		44,0,315,316,5,42,0,0,316,317,3,84,42,0,317,326,1,0,0,0,318,326,3,86,43,
		0,319,320,5,17,0,0,320,326,3,82,41,0,321,322,5,4,0,0,322,323,3,56,28,0,
		323,324,5,5,0,0,324,326,1,0,0,0,325,314,1,0,0,0,325,318,1,0,0,0,325,319,
		1,0,0,0,325,321,1,0,0,0,326,83,1,0,0,0,327,328,5,6,0,0,328,329,3,70,35,
		0,329,330,5,7,0,0,330,333,1,0,0,0,331,333,5,3,0,0,332,327,1,0,0,0,332,
		331,1,0,0,0,333,85,1,0,0,0,334,335,3,88,44,0,335,336,5,40,0,0,336,342,
		1,0,0,0,337,338,3,88,44,0,338,339,5,41,0,0,339,342,1,0,0,0,340,342,5,24,
		0,0,341,334,1,0,0,0,341,337,1,0,0,0,341,340,1,0,0,0,342,87,1,0,0,0,343,
		344,7,3,0,0,344,89,1,0,0,0,24,97,108,120,127,135,154,160,166,175,193,200,
		212,230,242,249,256,268,278,288,298,310,325,332,341
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
