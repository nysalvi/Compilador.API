//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Token.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class TokenParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		WHITESPACE=1, EPSILON=2, OPEN_PARENTHESIS=3, CLOSE_PARENTHESIS=4, OPEN_BRACKET=5, 
		CLOSE_BRACKET=6, OPEN_CURLYBRACKET=7, CLOSE_CURLYBRACKET=8, COMMA=9, SEMICOLON=10, 
		PLUS=11, MINUS=12, TIMES=13, DIV=14, MOD=15, NOT=16, ATTRIBUTION=17, LOWER=18, 
		LOWER_EQUAL=19, BIGGER=20, BIGGER_EQUAL=21, DIFFERENT=22, EQUALS=23, OR=24, 
		AND=25, FUNC=26, COMP=27, NEWLINE=28, COMMENT=29, TEXT=30, IF=31, INT=32, 
		FOR=33, CHAR=34, ELSE=35, MAIN=36, VOID=37, FLOAT=38, SCANF=39, WHILE=40, 
		BOOLEAN=41, PRINTLN=42, RETURN=43, BOOL=44, LETTER=45, INTEGER=46, DECIMAL=47, 
		ID=48;
	public const int
		RULE_programa = 0, RULE_funcoes = 1, RULE_dec_funcao = 2, RULE_tipo_retorno = 3, 
		RULE_tipo = 4, RULE_tipo_base = 5, RULE_dimensao = 6, RULE_parametros = 7, 
		RULE_novo_parametro = 8, RULE_principal = 9, RULE_bloco = 10, RULE_dec_variaveis = 11, 
		RULE_novo_id = 12, RULE_comandos = 13, RULE_comando = 14, RULE_leitura = 15, 
		RULE_escrita = 16, RULE_termo = 17, RULE_novo_termo = 18, RULE_selecao = 19, 
		RULE_senao = 20, RULE_enquanto = 21, RULE_atribuicao = 22, RULE_complemento = 23, 
		RULE_funcao = 24, RULE_argumentos = 25, RULE_novo_argumento = 26, RULE_retorno = 27, 
		RULE_expressao = 28, RULE_expr_ou = 29, RULE_expr_ou2 = 30, RULE_expr_e = 31, 
		RULE_expr_e2 = 32, RULE_expr_relacional = 33, RULE_expr_relacional2 = 34, 
		RULE_expr_aditiva = 35, RULE_expr_aditiva2 = 36, RULE_op_aditivo = 37, 
		RULE_expr_multiplicativa = 38, RULE_expr_multiplicativa2 = 39, RULE_op_multiplicativo = 40, 
		RULE_fator = 41, RULE_vetor = 42, RULE_constante = 43, RULE_sinal = 44;
	public static readonly string[] ruleNames = {
		"programa", "funcoes", "dec_funcao", "tipo_retorno", "tipo", "tipo_base", 
		"dimensao", "parametros", "novo_parametro", "principal", "bloco", "dec_variaveis", 
		"novo_id", "comandos", "comando", "leitura", "escrita", "termo", "novo_termo", 
		"selecao", "senao", "enquanto", "atribuicao", "complemento", "funcao", 
		"argumentos", "novo_argumento", "retorno", "expressao", "expr_ou", "expr_ou2", 
		"expr_e", "expr_e2", "expr_relacional", "expr_relacional2", "expr_aditiva", 
		"expr_aditiva2", "op_aditivo", "expr_multiplicativa", "expr_multiplicativa2", 
		"op_multiplicativo", "fator", "vetor", "constante", "sinal"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'('", "')'", "'['", "']'", "'{'", "'}'", "','", "';'", 
		"'+'", "'-'", "'*'", "'/'", "'%'", "'!'", "'='", "'<'", "'<='", "'>'", 
		"'>='", "'!='", "'=='", "'||'", "'&&'", "'func'", null, null, null, null, 
		"'if'", "'int'", "'for'", "'char'", "'else'", "'main'", "'void'", "'float'", 
		"'scanf'", "'while'", "'boolean'", "'println'", "'return'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WHITESPACE", "EPSILON", "OPEN_PARENTHESIS", "CLOSE_PARENTHESIS", 
		"OPEN_BRACKET", "CLOSE_BRACKET", "OPEN_CURLYBRACKET", "CLOSE_CURLYBRACKET", 
		"COMMA", "SEMICOLON", "PLUS", "MINUS", "TIMES", "DIV", "MOD", "NOT", "ATTRIBUTION", 
		"LOWER", "LOWER_EQUAL", "BIGGER", "BIGGER_EQUAL", "DIFFERENT", "EQUALS", 
		"OR", "AND", "FUNC", "COMP", "NEWLINE", "COMMENT", "TEXT", "IF", "INT", 
		"FOR", "CHAR", "ELSE", "MAIN", "VOID", "FLOAT", "SCANF", "WHILE", "BOOLEAN", 
		"PRINTLN", "RETURN", "BOOL", "LETTER", "INTEGER", "DECIMAL", "ID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Token.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static TokenParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public TokenParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public TokenParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncoesContext funcoes() {
			return GetRuleContext<FuncoesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrincipalContext principal() {
			return GetRuleContext<PrincipalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(TokenParser.Eof, 0); }
		public ProgramaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_programa; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterPrograma(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitPrograma(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrograma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramaContext programa() {
		ProgramaContext _localctx = new ProgramaContext(Context, State);
		EnterRule(_localctx, 0, RULE_programa);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			funcoes();
			State = 91;
			principal();
			State = 92;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncoesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Dec_funcaoContext dec_funcao() {
			return GetRuleContext<Dec_funcaoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncoesContext funcoes() {
			return GetRuleContext<FuncoesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EPSILON() { return GetToken(TokenParser.EPSILON, 0); }
		public FuncoesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcoes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterFuncoes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitFuncoes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncoes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncoesContext funcoes() {
		FuncoesContext _localctx = new FuncoesContext(Context, State);
		EnterRule(_localctx, 2, RULE_funcoes);
		try {
			State = 98;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
			case CHAR:
			case VOID:
			case FLOAT:
			case BOOLEAN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 94;
				dec_funcao();
				State = 95;
				funcoes();
				}
				break;
			case EPSILON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 97;
				Match(EPSILON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dec_funcaoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Tipo_retornoContext tipo_retorno() {
			return GetRuleContext<Tipo_retornoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(TokenParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENTHESIS() { return GetToken(TokenParser.OPEN_PARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParametrosContext parametros() {
			return GetRuleContext<ParametrosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENTHESIS() { return GetToken(TokenParser.CLOSE_PARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlocoContext bloco() {
			return GetRuleContext<BlocoContext>(0);
		}
		public Dec_funcaoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dec_funcao; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterDec_funcao(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitDec_funcao(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDec_funcao(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dec_funcaoContext dec_funcao() {
		Dec_funcaoContext _localctx = new Dec_funcaoContext(Context, State);
		EnterRule(_localctx, 4, RULE_dec_funcao);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			tipo_retorno();
			State = 101;
			Match(ID);
			State = 102;
			Match(OPEN_PARENTHESIS);
			State = 103;
			parametros();
			State = 104;
			Match(CLOSE_PARENTHESIS);
			State = 105;
			bloco();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tipo_retornoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TipoContext tipo() {
			return GetRuleContext<TipoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(TokenParser.VOID, 0); }
		public Tipo_retornoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tipo_retorno; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterTipo_retorno(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitTipo_retorno(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTipo_retorno(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tipo_retornoContext tipo_retorno() {
		Tipo_retornoContext _localctx = new Tipo_retornoContext(Context, State);
		EnterRule(_localctx, 6, RULE_tipo_retorno);
		try {
			State = 109;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
			case CHAR:
			case FLOAT:
			case BOOLEAN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 107;
				tipo();
				}
				break;
			case VOID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 108;
				Match(VOID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TipoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Tipo_baseContext tipo_base() {
			return GetRuleContext<Tipo_baseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DimensaoContext dimensao() {
			return GetRuleContext<DimensaoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(TokenParser.Eof, 0); }
		public TipoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tipo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterTipo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitTipo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTipo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TipoContext tipo() {
		TipoContext _localctx = new TipoContext(Context, State);
		EnterRule(_localctx, 8, RULE_tipo);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			tipo_base();
			State = 112;
			dimensao();
			State = 113;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tipo_baseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(TokenParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(TokenParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(TokenParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(TokenParser.BOOLEAN, 0); }
		public Tipo_baseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tipo_base; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterTipo_base(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitTipo_base(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTipo_base(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tipo_baseContext tipo_base() {
		Tipo_baseContext _localctx = new Tipo_baseContext(Context, State);
		EnterRule(_localctx, 10, RULE_tipo_base);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << CHAR) | (1L << FLOAT) | (1L << BOOLEAN))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DimensaoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(TokenParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(TokenParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(TokenParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DimensaoContext dimensao() {
			return GetRuleContext<DimensaoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(TokenParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EPSILON() { return GetToken(TokenParser.EPSILON, 0); }
		public DimensaoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dimensao; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterDimensao(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitDimensao(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDimensao(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DimensaoContext dimensao() {
		DimensaoContext _localctx = new DimensaoContext(Context, State);
		EnterRule(_localctx, 12, RULE_dimensao);
		try {
			State = 125;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BRACKET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 117;
				Match(OPEN_BRACKET);
				State = 118;
				Match(INTEGER);
				State = 119;
				Match(CLOSE_BRACKET);
				State = 120;
				dimensao();
				State = 121;
				Match(Eof);
				}
				break;
			case EPSILON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 123;
				Match(EPSILON);
				State = 124;
				Match(Eof);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametrosContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TipoContext tipo() {
			return GetRuleContext<TipoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(TokenParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Novo_parametroContext novo_parametro() {
			return GetRuleContext<Novo_parametroContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EPSILON() { return GetToken(TokenParser.EPSILON, 0); }
		public ParametrosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parametros; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterParametros(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitParametros(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParametros(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametrosContext parametros() {
		ParametrosContext _localctx = new ParametrosContext(Context, State);
		EnterRule(_localctx, 14, RULE_parametros);
		try {
			State = 132;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
			case CHAR:
			case FLOAT:
			case BOOLEAN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 127;
				tipo();
				State = 128;
				Match(ID);
				State = 129;
				novo_parametro();
				}
				break;
			case EPSILON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 131;
				Match(EPSILON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Novo_parametroContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(TokenParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TipoContext tipo() {
			return GetRuleContext<TipoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(TokenParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Novo_parametroContext novo_parametro() {
			return GetRuleContext<Novo_parametroContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EPSILON() { return GetToken(TokenParser.EPSILON, 0); }
		public Novo_parametroContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_novo_parametro; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterNovo_parametro(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitNovo_parametro(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNovo_parametro(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Novo_parametroContext novo_parametro() {
		Novo_parametroContext _localctx = new Novo_parametroContext(Context, State);
		EnterRule(_localctx, 16, RULE_novo_parametro);
		try {
			State = 140;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COMMA:
				EnterOuterAlt(_localctx, 1);
				{
				State = 134;
				Match(COMMA);
				State = 135;
				tipo();
				State = 136;
				Match(ID);
				State = 137;
				novo_parametro();
				}
				break;
			case EPSILON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 139;
				Match(EPSILON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrincipalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAIN() { return GetToken(TokenParser.MAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENTHESIS() { return GetToken(TokenParser.OPEN_PARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENTHESIS() { return GetToken(TokenParser.CLOSE_PARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlocoContext bloco() {
			return GetRuleContext<BlocoContext>(0);
		}
		public PrincipalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_principal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterPrincipal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitPrincipal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrincipal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrincipalContext principal() {
		PrincipalContext _localctx = new PrincipalContext(Context, State);
		EnterRule(_localctx, 18, RULE_principal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142;
			Match(MAIN);
			State = 143;
			Match(OPEN_PARENTHESIS);
			State = 144;
			Match(CLOSE_PARENTHESIS);
			State = 145;
			bloco();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlocoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_CURLYBRACKET() { return GetToken(TokenParser.OPEN_CURLYBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Dec_variaveisContext dec_variaveis() {
			return GetRuleContext<Dec_variaveisContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComandosContext comandos() {
			return GetRuleContext<ComandosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_CURLYBRACKET() { return GetToken(TokenParser.CLOSE_CURLYBRACKET, 0); }
		public BlocoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bloco; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterBloco(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitBloco(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBloco(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlocoContext bloco() {
		BlocoContext _localctx = new BlocoContext(Context, State);
		EnterRule(_localctx, 20, RULE_bloco);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147;
			Match(OPEN_CURLYBRACKET);
			State = 148;
			dec_variaveis();
			State = 149;
			comandos();
			State = 150;
			Match(CLOSE_CURLYBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dec_variaveisContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TipoContext tipo() {
			return GetRuleContext<TipoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(TokenParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Novo_idContext novo_id() {
			return GetRuleContext<Novo_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(TokenParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Dec_variaveisContext dec_variaveis() {
			return GetRuleContext<Dec_variaveisContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EPSILON() { return GetToken(TokenParser.EPSILON, 0); }
		public Dec_variaveisContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dec_variaveis; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterDec_variaveis(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitDec_variaveis(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDec_variaveis(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dec_variaveisContext dec_variaveis() {
		Dec_variaveisContext _localctx = new Dec_variaveisContext(Context, State);
		EnterRule(_localctx, 22, RULE_dec_variaveis);
		try {
			State = 159;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
			case CHAR:
			case FLOAT:
			case BOOLEAN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 152;
				tipo();
				State = 153;
				Match(ID);
				State = 154;
				novo_id();
				State = 155;
				Match(SEMICOLON);
				State = 156;
				dec_variaveis();
				}
				break;
			case EPSILON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 158;
				Match(EPSILON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Novo_idContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(TokenParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(TokenParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Novo_idContext novo_id() {
			return GetRuleContext<Novo_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EPSILON() { return GetToken(TokenParser.EPSILON, 0); }
		public Novo_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_novo_id; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterNovo_id(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitNovo_id(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNovo_id(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Novo_idContext novo_id() {
		Novo_idContext _localctx = new Novo_idContext(Context, State);
		EnterRule(_localctx, 24, RULE_novo_id);
		try {
			State = 165;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COMMA:
				EnterOuterAlt(_localctx, 1);
				{
				State = 161;
				Match(COMMA);
				State = 162;
				Match(ID);
				State = 163;
				novo_id();
				}
				break;
			case EPSILON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 164;
				Match(EPSILON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComandosContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ComandoContext comando() {
			return GetRuleContext<ComandoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComandosContext comandos() {
			return GetRuleContext<ComandosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EPSILON() { return GetToken(TokenParser.EPSILON, 0); }
		public ComandosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comandos; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterComandos(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitComandos(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComandos(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComandosContext comandos() {
		ComandosContext _localctx = new ComandosContext(Context, State);
		EnterRule(_localctx, 26, RULE_comandos);
		try {
			State = 171;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 167;
				comando();
				State = 168;
				comandos();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 170;
				Match(EPSILON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComandoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LeituraContext leitura() {
			return GetRuleContext<LeituraContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EscritaContext escrita() {
			return GetRuleContext<EscritaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtribuicaoContext atribuicao() {
			return GetRuleContext<AtribuicaoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncaoContext funcao() {
			return GetRuleContext<FuncaoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelecaoContext selecao() {
			return GetRuleContext<SelecaoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnquantoContext enquanto() {
			return GetRuleContext<EnquantoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RetornoContext retorno() {
			return GetRuleContext<RetornoContext>(0);
		}
		public ComandoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comando; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterComando(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitComando(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComando(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComandoContext comando() {
		ComandoContext _localctx = new ComandoContext(Context, State);
		EnterRule(_localctx, 28, RULE_comando);
		try {
			State = 180;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SCANF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 173;
				leitura();
				}
				break;
			case PRINTLN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 174;
				escrita();
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 175;
				atribuicao();
				}
				break;
			case FUNC:
				EnterOuterAlt(_localctx, 4);
				{
				State = 176;
				funcao();
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 5);
				{
				State = 177;
				selecao();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 178;
				enquanto();
				}
				break;
			case EPSILON:
			case RETURN:
				EnterOuterAlt(_localctx, 7);
				{
				State = 179;
				retorno();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeituraContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCANF() { return GetToken(TokenParser.SCANF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENTHESIS() { return GetToken(TokenParser.OPEN_PARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(TokenParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Novo_idContext novo_id() {
			return GetRuleContext<Novo_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENTHESIS() { return GetToken(TokenParser.CLOSE_PARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(TokenParser.SEMICOLON, 0); }
		public LeituraContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leitura; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterLeitura(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitLeitura(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeitura(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LeituraContext leitura() {
		LeituraContext _localctx = new LeituraContext(Context, State);
		EnterRule(_localctx, 30, RULE_leitura);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182;
			Match(SCANF);
			State = 183;
			Match(OPEN_PARENTHESIS);
			State = 184;
			Match(ID);
			State = 185;
			novo_id();
			State = 186;
			Match(CLOSE_PARENTHESIS);
			State = 187;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EscritaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINTLN() { return GetToken(TokenParser.PRINTLN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENTHESIS() { return GetToken(TokenParser.OPEN_PARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermoContext termo() {
			return GetRuleContext<TermoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Novo_termoContext novo_termo() {
			return GetRuleContext<Novo_termoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENTHESIS() { return GetToken(TokenParser.CLOSE_PARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(TokenParser.SEMICOLON, 0); }
		public EscritaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_escrita; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterEscrita(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitEscrita(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEscrita(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EscritaContext escrita() {
		EscritaContext _localctx = new EscritaContext(Context, State);
		EnterRule(_localctx, 32, RULE_escrita);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 189;
			Match(PRINTLN);
			State = 190;
			Match(OPEN_PARENTHESIS);
			State = 191;
			termo();
			State = 192;
			novo_termo();
			State = 193;
			Match(CLOSE_PARENTHESIS);
			State = 194;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(TokenParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstanteContext constante() {
			return GetRuleContext<ConstanteContext>(0);
		}
		public TermoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_termo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterTermo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitTermo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTermo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermoContext termo() {
		TermoContext _localctx = new TermoContext(Context, State);
		EnterRule(_localctx, 34, RULE_termo);
		try {
			State = 198;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 196;
				Match(ID);
				}
				break;
			case EPSILON:
			case PLUS:
			case MINUS:
			case TEXT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 197;
				constante();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Novo_termoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(TokenParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermoContext termo() {
			return GetRuleContext<TermoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Novo_termoContext novo_termo() {
			return GetRuleContext<Novo_termoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EPSILON() { return GetToken(TokenParser.EPSILON, 0); }
		public Novo_termoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_novo_termo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterNovo_termo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitNovo_termo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNovo_termo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Novo_termoContext novo_termo() {
		Novo_termoContext _localctx = new Novo_termoContext(Context, State);
		EnterRule(_localctx, 36, RULE_novo_termo);
		try {
			State = 205;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COMMA:
				EnterOuterAlt(_localctx, 1);
				{
				State = 200;
				Match(COMMA);
				State = 201;
				termo();
				State = 202;
				novo_termo();
				}
				break;
			case EPSILON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 204;
				Match(EPSILON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelecaoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(TokenParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENTHESIS() { return GetToken(TokenParser.OPEN_PARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressaoContext expressao() {
			return GetRuleContext<ExpressaoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENTHESIS() { return GetToken(TokenParser.CLOSE_PARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlocoContext bloco() {
			return GetRuleContext<BlocoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SenaoContext senao() {
			return GetRuleContext<SenaoContext>(0);
		}
		public SelecaoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selecao; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterSelecao(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitSelecao(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelecao(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelecaoContext selecao() {
		SelecaoContext _localctx = new SelecaoContext(Context, State);
		EnterRule(_localctx, 38, RULE_selecao);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207;
			Match(IF);
			State = 208;
			Match(OPEN_PARENTHESIS);
			State = 209;
			expressao();
			State = 210;
			Match(CLOSE_PARENTHESIS);
			State = 211;
			bloco();
			State = 212;
			senao();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SenaoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(TokenParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlocoContext bloco() {
			return GetRuleContext<BlocoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EPSILON() { return GetToken(TokenParser.EPSILON, 0); }
		public SenaoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_senao; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterSenao(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitSenao(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSenao(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SenaoContext senao() {
		SenaoContext _localctx = new SenaoContext(Context, State);
		EnterRule(_localctx, 40, RULE_senao);
		try {
			State = 217;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ELSE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 214;
				Match(ELSE);
				State = 215;
				bloco();
				}
				break;
			case EPSILON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 216;
				Match(EPSILON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnquantoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(TokenParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENTHESIS() { return GetToken(TokenParser.OPEN_PARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressaoContext expressao() {
			return GetRuleContext<ExpressaoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENTHESIS() { return GetToken(TokenParser.CLOSE_PARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlocoContext bloco() {
			return GetRuleContext<BlocoContext>(0);
		}
		public EnquantoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enquanto; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterEnquanto(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitEnquanto(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnquanto(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnquantoContext enquanto() {
		EnquantoContext _localctx = new EnquantoContext(Context, State);
		EnterRule(_localctx, 42, RULE_enquanto);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219;
			Match(WHILE);
			State = 220;
			Match(OPEN_PARENTHESIS);
			State = 221;
			expressao();
			State = 222;
			Match(CLOSE_PARENTHESIS);
			State = 223;
			bloco();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtribuicaoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(TokenParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTRIBUTION() { return GetToken(TokenParser.ATTRIBUTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ComplementoContext complemento() {
			return GetRuleContext<ComplementoContext>(0);
		}
		public AtribuicaoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atribuicao; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterAtribuicao(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitAtribuicao(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtribuicao(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtribuicaoContext atribuicao() {
		AtribuicaoContext _localctx = new AtribuicaoContext(Context, State);
		EnterRule(_localctx, 44, RULE_atribuicao);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225;
			Match(ID);
			State = 226;
			Match(ATTRIBUTION);
			State = 227;
			complemento();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplementoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressaoContext expressao() {
			return GetRuleContext<ExpressaoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(TokenParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FuncaoContext funcao() {
			return GetRuleContext<FuncaoContext>(0);
		}
		public ComplementoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complemento; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterComplemento(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitComplemento(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplemento(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComplementoContext complemento() {
		ComplementoContext _localctx = new ComplementoContext(Context, State);
		EnterRule(_localctx, 46, RULE_complemento);
		try {
			State = 235;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EPSILON:
			case OPEN_PARENTHESIS:
			case PLUS:
			case MINUS:
			case NOT:
			case TEXT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 229;
				expressao();
				State = 230;
				Match(SEMICOLON);
				}
				break;
			case FUNC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 232;
				funcao();
				State = 233;
				Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncaoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC() { return GetToken(TokenParser.FUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(TokenParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENTHESIS() { return GetToken(TokenParser.OPEN_PARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentosContext argumentos() {
			return GetRuleContext<ArgumentosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENTHESIS() { return GetToken(TokenParser.CLOSE_PARENTHESIS, 0); }
		public FuncaoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcao; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterFuncao(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitFuncao(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncao(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncaoContext funcao() {
		FuncaoContext _localctx = new FuncaoContext(Context, State);
		EnterRule(_localctx, 48, RULE_funcao);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237;
			Match(FUNC);
			State = 238;
			Match(ID);
			State = 239;
			Match(OPEN_PARENTHESIS);
			State = 240;
			argumentos();
			State = 241;
			Match(CLOSE_PARENTHESIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentosContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressaoContext expressao() {
			return GetRuleContext<ExpressaoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Novo_argumentoContext novo_argumento() {
			return GetRuleContext<Novo_argumentoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EPSILON() { return GetToken(TokenParser.EPSILON, 0); }
		public ArgumentosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentos; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterArgumentos(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitArgumentos(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentos(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentosContext argumentos() {
		ArgumentosContext _localctx = new ArgumentosContext(Context, State);
		EnterRule(_localctx, 50, RULE_argumentos);
		try {
			State = 247;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 243;
				expressao();
				State = 244;
				novo_argumento();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 246;
				Match(EPSILON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Novo_argumentoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(TokenParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressaoContext expressao() {
			return GetRuleContext<ExpressaoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Novo_argumentoContext novo_argumento() {
			return GetRuleContext<Novo_argumentoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EPSILON() { return GetToken(TokenParser.EPSILON, 0); }
		public Novo_argumentoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_novo_argumento; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterNovo_argumento(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitNovo_argumento(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNovo_argumento(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Novo_argumentoContext novo_argumento() {
		Novo_argumentoContext _localctx = new Novo_argumentoContext(Context, State);
		EnterRule(_localctx, 52, RULE_novo_argumento);
		try {
			State = 254;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COMMA:
				EnterOuterAlt(_localctx, 1);
				{
				State = 249;
				Match(COMMA);
				State = 250;
				expressao();
				State = 251;
				novo_argumento();
				}
				break;
			case EPSILON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 253;
				Match(EPSILON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RetornoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(TokenParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressaoContext expressao() {
			return GetRuleContext<ExpressaoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(TokenParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EPSILON() { return GetToken(TokenParser.EPSILON, 0); }
		public RetornoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_retorno; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterRetorno(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitRetorno(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRetorno(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RetornoContext retorno() {
		RetornoContext _localctx = new RetornoContext(Context, State);
		EnterRule(_localctx, 54, RULE_retorno);
		try {
			State = 261;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RETURN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 256;
				Match(RETURN);
				State = 257;
				expressao();
				State = 258;
				Match(SEMICOLON);
				}
				break;
			case EPSILON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 260;
				Match(EPSILON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressaoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expr_ouContext expr_ou() {
			return GetRuleContext<Expr_ouContext>(0);
		}
		public ExpressaoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressao; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterExpressao(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitExpressao(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressao(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressaoContext expressao() {
		ExpressaoContext _localctx = new ExpressaoContext(Context, State);
		EnterRule(_localctx, 56, RULE_expressao);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 263;
			expr_ou();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_ouContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expr_eContext expr_e() {
			return GetRuleContext<Expr_eContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_ou2Context expr_ou2() {
			return GetRuleContext<Expr_ou2Context>(0);
		}
		public Expr_ouContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_ou; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterExpr_ou(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitExpr_ou(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_ou(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expr_ouContext expr_ou() {
		Expr_ouContext _localctx = new Expr_ouContext(Context, State);
		EnterRule(_localctx, 58, RULE_expr_ou);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 265;
			expr_e();
			State = 266;
			expr_ou2();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_ou2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(TokenParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_eContext expr_e() {
			return GetRuleContext<Expr_eContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_ou2Context expr_ou2() {
			return GetRuleContext<Expr_ou2Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EPSILON() { return GetToken(TokenParser.EPSILON, 0); }
		public Expr_ou2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_ou2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterExpr_ou2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitExpr_ou2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_ou2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expr_ou2Context expr_ou2() {
		Expr_ou2Context _localctx = new Expr_ou2Context(Context, State);
		EnterRule(_localctx, 60, RULE_expr_ou2);
		try {
			State = 273;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 268;
				Match(OR);
				State = 269;
				expr_e();
				State = 270;
				expr_ou2();
				}
				break;
			case EPSILON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 272;
				Match(EPSILON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_eContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expr_relacionalContext expr_relacional() {
			return GetRuleContext<Expr_relacionalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_e2Context expr_e2() {
			return GetRuleContext<Expr_e2Context>(0);
		}
		public Expr_eContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_e; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterExpr_e(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitExpr_e(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_e(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expr_eContext expr_e() {
		Expr_eContext _localctx = new Expr_eContext(Context, State);
		EnterRule(_localctx, 62, RULE_expr_e);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 275;
			expr_relacional();
			State = 276;
			expr_e2();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_e2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(TokenParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_relacionalContext expr_relacional() {
			return GetRuleContext<Expr_relacionalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_e2Context expr_e2() {
			return GetRuleContext<Expr_e2Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EPSILON() { return GetToken(TokenParser.EPSILON, 0); }
		public Expr_e2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_e2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterExpr_e2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitExpr_e2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_e2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expr_e2Context expr_e2() {
		Expr_e2Context _localctx = new Expr_e2Context(Context, State);
		EnterRule(_localctx, 64, RULE_expr_e2);
		try {
			State = 283;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
				EnterOuterAlt(_localctx, 1);
				{
				State = 278;
				Match(AND);
				State = 279;
				expr_relacional();
				State = 280;
				expr_e2();
				}
				break;
			case EPSILON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 282;
				Match(EPSILON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_relacionalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expr_aditivaContext expr_aditiva() {
			return GetRuleContext<Expr_aditivaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_relacional2Context expr_relacional2() {
			return GetRuleContext<Expr_relacional2Context>(0);
		}
		public Expr_relacionalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_relacional; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterExpr_relacional(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitExpr_relacional(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_relacional(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expr_relacionalContext expr_relacional() {
		Expr_relacionalContext _localctx = new Expr_relacionalContext(Context, State);
		EnterRule(_localctx, 66, RULE_expr_relacional);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285;
			expr_aditiva();
			State = 286;
			expr_relacional2();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_relacional2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMP() { return GetToken(TokenParser.COMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_aditivaContext expr_aditiva() {
			return GetRuleContext<Expr_aditivaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_relacional2Context expr_relacional2() {
			return GetRuleContext<Expr_relacional2Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EPSILON() { return GetToken(TokenParser.EPSILON, 0); }
		public Expr_relacional2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_relacional2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterExpr_relacional2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitExpr_relacional2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_relacional2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expr_relacional2Context expr_relacional2() {
		Expr_relacional2Context _localctx = new Expr_relacional2Context(Context, State);
		EnterRule(_localctx, 68, RULE_expr_relacional2);
		try {
			State = 293;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COMP:
				EnterOuterAlt(_localctx, 1);
				{
				State = 288;
				Match(COMP);
				State = 289;
				expr_aditiva();
				State = 290;
				expr_relacional2();
				}
				break;
			case EPSILON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 292;
				Match(EPSILON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_aditivaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expr_multiplicativaContext expr_multiplicativa() {
			return GetRuleContext<Expr_multiplicativaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_aditiva2Context expr_aditiva2() {
			return GetRuleContext<Expr_aditiva2Context>(0);
		}
		public Expr_aditivaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_aditiva; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterExpr_aditiva(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitExpr_aditiva(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_aditiva(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expr_aditivaContext expr_aditiva() {
		Expr_aditivaContext _localctx = new Expr_aditivaContext(Context, State);
		EnterRule(_localctx, 70, RULE_expr_aditiva);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 295;
			expr_multiplicativa();
			State = 296;
			expr_aditiva2();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_aditiva2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Op_aditivoContext op_aditivo() {
			return GetRuleContext<Op_aditivoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_multiplicativaContext expr_multiplicativa() {
			return GetRuleContext<Expr_multiplicativaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_aditiva2Context expr_aditiva2() {
			return GetRuleContext<Expr_aditiva2Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EPSILON() { return GetToken(TokenParser.EPSILON, 0); }
		public Expr_aditiva2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_aditiva2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterExpr_aditiva2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitExpr_aditiva2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_aditiva2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expr_aditiva2Context expr_aditiva2() {
		Expr_aditiva2Context _localctx = new Expr_aditiva2Context(Context, State);
		EnterRule(_localctx, 72, RULE_expr_aditiva2);
		try {
			State = 303;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PLUS:
			case MINUS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 298;
				op_aditivo();
				State = 299;
				expr_multiplicativa();
				State = 300;
				expr_aditiva2();
				}
				break;
			case EPSILON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 302;
				Match(EPSILON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_aditivoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(TokenParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(TokenParser.MINUS, 0); }
		public Op_aditivoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_aditivo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterOp_aditivo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitOp_aditivo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_aditivo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_aditivoContext op_aditivo() {
		Op_aditivoContext _localctx = new Op_aditivoContext(Context, State);
		EnterRule(_localctx, 74, RULE_op_aditivo);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 305;
			_la = TokenStream.LA(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_multiplicativaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FatorContext fator() {
			return GetRuleContext<FatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_multiplicativa2Context expr_multiplicativa2() {
			return GetRuleContext<Expr_multiplicativa2Context>(0);
		}
		public Expr_multiplicativaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_multiplicativa; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterExpr_multiplicativa(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitExpr_multiplicativa(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_multiplicativa(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expr_multiplicativaContext expr_multiplicativa() {
		Expr_multiplicativaContext _localctx = new Expr_multiplicativaContext(Context, State);
		EnterRule(_localctx, 76, RULE_expr_multiplicativa);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 307;
			fator();
			State = 308;
			expr_multiplicativa2();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_multiplicativa2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Op_multiplicativoContext op_multiplicativo() {
			return GetRuleContext<Op_multiplicativoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FatorContext fator() {
			return GetRuleContext<FatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_multiplicativa2Context expr_multiplicativa2() {
			return GetRuleContext<Expr_multiplicativa2Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EPSILON() { return GetToken(TokenParser.EPSILON, 0); }
		public Expr_multiplicativa2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_multiplicativa2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterExpr_multiplicativa2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitExpr_multiplicativa2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_multiplicativa2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expr_multiplicativa2Context expr_multiplicativa2() {
		Expr_multiplicativa2Context _localctx = new Expr_multiplicativa2Context(Context, State);
		EnterRule(_localctx, 78, RULE_expr_multiplicativa2);
		try {
			State = 315;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TIMES:
			case DIV:
			case MOD:
				EnterOuterAlt(_localctx, 1);
				{
				State = 310;
				op_multiplicativo();
				State = 311;
				fator();
				State = 312;
				expr_multiplicativa2();
				}
				break;
			case EPSILON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 314;
				Match(EPSILON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_multiplicativoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMES() { return GetToken(TokenParser.TIMES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(TokenParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(TokenParser.MOD, 0); }
		public Op_multiplicativoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_multiplicativo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterOp_multiplicativo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitOp_multiplicativo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_multiplicativo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_multiplicativoContext op_multiplicativo() {
		Op_multiplicativoContext _localctx = new Op_multiplicativoContext(Context, State);
		EnterRule(_localctx, 80, RULE_op_multiplicativo);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 317;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TIMES) | (1L << DIV) | (1L << MOD))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SinalContext sinal() {
			return GetRuleContext<SinalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(TokenParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VetorContext vetor() {
			return GetRuleContext<VetorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstanteContext constante() {
			return GetRuleContext<ConstanteContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(TokenParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FatorContext fator() {
			return GetRuleContext<FatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENTHESIS() { return GetToken(TokenParser.OPEN_PARENTHESIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressaoContext expressao() {
			return GetRuleContext<ExpressaoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENTHESIS() { return GetToken(TokenParser.CLOSE_PARENTHESIS, 0); }
		public FatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterFator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitFator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FatorContext fator() {
		FatorContext _localctx = new FatorContext(Context, State);
		EnterRule(_localctx, 82, RULE_fator);
		try {
			State = 330;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 319;
				sinal();
				State = 320;
				Match(ID);
				State = 321;
				vetor();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 323;
				constante();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 324;
				Match(NOT);
				State = 325;
				fator();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 326;
				Match(OPEN_PARENTHESIS);
				State = 327;
				expressao();
				State = 328;
				Match(CLOSE_PARENTHESIS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VetorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(TokenParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_aditivaContext expr_aditiva() {
			return GetRuleContext<Expr_aditivaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(TokenParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EPSILON() { return GetToken(TokenParser.EPSILON, 0); }
		public VetorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vetor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterVetor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitVetor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVetor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VetorContext vetor() {
		VetorContext _localctx = new VetorContext(Context, State);
		EnterRule(_localctx, 84, RULE_vetor);
		try {
			State = 337;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BRACKET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 332;
				Match(OPEN_BRACKET);
				State = 333;
				expr_aditiva();
				State = 334;
				Match(CLOSE_BRACKET);
				}
				break;
			case EPSILON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 336;
				Match(EPSILON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstanteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SinalContext sinal() {
			return GetRuleContext<SinalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(TokenParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(TokenParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(TokenParser.TEXT, 0); }
		public ConstanteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constante; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterConstante(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitConstante(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstante(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstanteContext constante() {
		ConstanteContext _localctx = new ConstanteContext(Context, State);
		EnterRule(_localctx, 86, RULE_constante);
		try {
			State = 346;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 339;
				sinal();
				State = 340;
				Match(INTEGER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 342;
				sinal();
				State = 343;
				Match(DECIMAL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 345;
				Match(TEXT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SinalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(TokenParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(TokenParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EPSILON() { return GetToken(TokenParser.EPSILON, 0); }
		public SinalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sinal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.EnterSinal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITokenListener typedListener = listener as ITokenListener;
			if (typedListener != null) typedListener.ExitSinal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITokenVisitor<TResult> typedVisitor = visitor as ITokenVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSinal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SinalContext sinal() {
		SinalContext _localctx = new SinalContext(Context, State);
		EnterRule(_localctx, 88, RULE_sinal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 348;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EPSILON) | (1L << PLUS) | (1L << MINUS))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,48,351,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,3,1,99,8,1,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,3,1,3,3,3,110,8,3,1,4,1,4,1,4,1,4,1,5,1,5,1,6,1,
		6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,126,8,6,1,7,1,7,1,7,1,7,1,7,3,7,133,8,7,
		1,8,1,8,1,8,1,8,1,8,1,8,3,8,141,8,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,
		1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,160,8,11,1,12,1,12,1,
		12,1,12,3,12,166,8,12,1,13,1,13,1,13,1,13,3,13,172,8,13,1,14,1,14,1,14,
		1,14,1,14,1,14,1,14,3,14,181,8,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,
		16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,3,17,199,8,17,1,18,1,18,1,18,
		1,18,1,18,3,18,206,8,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,
		20,3,20,218,8,20,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,23,
		1,23,1,23,1,23,1,23,1,23,3,23,236,8,23,1,24,1,24,1,24,1,24,1,24,1,24,1,
		25,1,25,1,25,1,25,3,25,248,8,25,1,26,1,26,1,26,1,26,1,26,3,26,255,8,26,
		1,27,1,27,1,27,1,27,1,27,3,27,262,8,27,1,28,1,28,1,29,1,29,1,29,1,30,1,
		30,1,30,1,30,1,30,3,30,274,8,30,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,
		3,32,284,8,32,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,3,34,294,8,34,1,
		35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,3,36,304,8,36,1,37,1,37,1,38,1,38,
		1,38,1,39,1,39,1,39,1,39,1,39,3,39,316,8,39,1,40,1,40,1,41,1,41,1,41,1,
		41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,3,41,331,8,41,1,42,1,42,1,42,1,42,
		1,42,3,42,338,8,42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,3,43,347,8,43,1,
		44,1,44,1,44,0,0,45,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,
		38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,
		86,88,0,4,4,0,32,32,34,34,38,38,41,41,1,0,11,12,1,0,13,15,2,0,2,2,11,12,
		337,0,90,1,0,0,0,2,98,1,0,0,0,4,100,1,0,0,0,6,109,1,0,0,0,8,111,1,0,0,
		0,10,115,1,0,0,0,12,125,1,0,0,0,14,132,1,0,0,0,16,140,1,0,0,0,18,142,1,
		0,0,0,20,147,1,0,0,0,22,159,1,0,0,0,24,165,1,0,0,0,26,171,1,0,0,0,28,180,
		1,0,0,0,30,182,1,0,0,0,32,189,1,0,0,0,34,198,1,0,0,0,36,205,1,0,0,0,38,
		207,1,0,0,0,40,217,1,0,0,0,42,219,1,0,0,0,44,225,1,0,0,0,46,235,1,0,0,
		0,48,237,1,0,0,0,50,247,1,0,0,0,52,254,1,0,0,0,54,261,1,0,0,0,56,263,1,
		0,0,0,58,265,1,0,0,0,60,273,1,0,0,0,62,275,1,0,0,0,64,283,1,0,0,0,66,285,
		1,0,0,0,68,293,1,0,0,0,70,295,1,0,0,0,72,303,1,0,0,0,74,305,1,0,0,0,76,
		307,1,0,0,0,78,315,1,0,0,0,80,317,1,0,0,0,82,330,1,0,0,0,84,337,1,0,0,
		0,86,346,1,0,0,0,88,348,1,0,0,0,90,91,3,2,1,0,91,92,3,18,9,0,92,93,5,0,
		0,1,93,1,1,0,0,0,94,95,3,4,2,0,95,96,3,2,1,0,96,99,1,0,0,0,97,99,5,2,0,
		0,98,94,1,0,0,0,98,97,1,0,0,0,99,3,1,0,0,0,100,101,3,6,3,0,101,102,5,48,
		0,0,102,103,5,3,0,0,103,104,3,14,7,0,104,105,5,4,0,0,105,106,3,20,10,0,
		106,5,1,0,0,0,107,110,3,8,4,0,108,110,5,37,0,0,109,107,1,0,0,0,109,108,
		1,0,0,0,110,7,1,0,0,0,111,112,3,10,5,0,112,113,3,12,6,0,113,114,5,0,0,
		1,114,9,1,0,0,0,115,116,7,0,0,0,116,11,1,0,0,0,117,118,5,5,0,0,118,119,
		5,46,0,0,119,120,5,6,0,0,120,121,3,12,6,0,121,122,5,0,0,1,122,126,1,0,
		0,0,123,124,5,2,0,0,124,126,5,0,0,1,125,117,1,0,0,0,125,123,1,0,0,0,126,
		13,1,0,0,0,127,128,3,8,4,0,128,129,5,48,0,0,129,130,3,16,8,0,130,133,1,
		0,0,0,131,133,5,2,0,0,132,127,1,0,0,0,132,131,1,0,0,0,133,15,1,0,0,0,134,
		135,5,9,0,0,135,136,3,8,4,0,136,137,5,48,0,0,137,138,3,16,8,0,138,141,
		1,0,0,0,139,141,5,2,0,0,140,134,1,0,0,0,140,139,1,0,0,0,141,17,1,0,0,0,
		142,143,5,36,0,0,143,144,5,3,0,0,144,145,5,4,0,0,145,146,3,20,10,0,146,
		19,1,0,0,0,147,148,5,7,0,0,148,149,3,22,11,0,149,150,3,26,13,0,150,151,
		5,8,0,0,151,21,1,0,0,0,152,153,3,8,4,0,153,154,5,48,0,0,154,155,3,24,12,
		0,155,156,5,10,0,0,156,157,3,22,11,0,157,160,1,0,0,0,158,160,5,2,0,0,159,
		152,1,0,0,0,159,158,1,0,0,0,160,23,1,0,0,0,161,162,5,9,0,0,162,163,5,48,
		0,0,163,166,3,24,12,0,164,166,5,2,0,0,165,161,1,0,0,0,165,164,1,0,0,0,
		166,25,1,0,0,0,167,168,3,28,14,0,168,169,3,26,13,0,169,172,1,0,0,0,170,
		172,5,2,0,0,171,167,1,0,0,0,171,170,1,0,0,0,172,27,1,0,0,0,173,181,3,30,
		15,0,174,181,3,32,16,0,175,181,3,44,22,0,176,181,3,48,24,0,177,181,3,38,
		19,0,178,181,3,42,21,0,179,181,3,54,27,0,180,173,1,0,0,0,180,174,1,0,0,
		0,180,175,1,0,0,0,180,176,1,0,0,0,180,177,1,0,0,0,180,178,1,0,0,0,180,
		179,1,0,0,0,181,29,1,0,0,0,182,183,5,39,0,0,183,184,5,3,0,0,184,185,5,
		48,0,0,185,186,3,24,12,0,186,187,5,4,0,0,187,188,5,10,0,0,188,31,1,0,0,
		0,189,190,5,42,0,0,190,191,5,3,0,0,191,192,3,34,17,0,192,193,3,36,18,0,
		193,194,5,4,0,0,194,195,5,10,0,0,195,33,1,0,0,0,196,199,5,48,0,0,197,199,
		3,86,43,0,198,196,1,0,0,0,198,197,1,0,0,0,199,35,1,0,0,0,200,201,5,9,0,
		0,201,202,3,34,17,0,202,203,3,36,18,0,203,206,1,0,0,0,204,206,5,2,0,0,
		205,200,1,0,0,0,205,204,1,0,0,0,206,37,1,0,0,0,207,208,5,31,0,0,208,209,
		5,3,0,0,209,210,3,56,28,0,210,211,5,4,0,0,211,212,3,20,10,0,212,213,3,
		40,20,0,213,39,1,0,0,0,214,215,5,35,0,0,215,218,3,20,10,0,216,218,5,2,
		0,0,217,214,1,0,0,0,217,216,1,0,0,0,218,41,1,0,0,0,219,220,5,40,0,0,220,
		221,5,3,0,0,221,222,3,56,28,0,222,223,5,4,0,0,223,224,3,20,10,0,224,43,
		1,0,0,0,225,226,5,48,0,0,226,227,5,17,0,0,227,228,3,46,23,0,228,45,1,0,
		0,0,229,230,3,56,28,0,230,231,5,10,0,0,231,236,1,0,0,0,232,233,3,48,24,
		0,233,234,5,10,0,0,234,236,1,0,0,0,235,229,1,0,0,0,235,232,1,0,0,0,236,
		47,1,0,0,0,237,238,5,26,0,0,238,239,5,48,0,0,239,240,5,3,0,0,240,241,3,
		50,25,0,241,242,5,4,0,0,242,49,1,0,0,0,243,244,3,56,28,0,244,245,3,52,
		26,0,245,248,1,0,0,0,246,248,5,2,0,0,247,243,1,0,0,0,247,246,1,0,0,0,248,
		51,1,0,0,0,249,250,5,9,0,0,250,251,3,56,28,0,251,252,3,52,26,0,252,255,
		1,0,0,0,253,255,5,2,0,0,254,249,1,0,0,0,254,253,1,0,0,0,255,53,1,0,0,0,
		256,257,5,43,0,0,257,258,3,56,28,0,258,259,5,10,0,0,259,262,1,0,0,0,260,
		262,5,2,0,0,261,256,1,0,0,0,261,260,1,0,0,0,262,55,1,0,0,0,263,264,3,58,
		29,0,264,57,1,0,0,0,265,266,3,62,31,0,266,267,3,60,30,0,267,59,1,0,0,0,
		268,269,5,24,0,0,269,270,3,62,31,0,270,271,3,60,30,0,271,274,1,0,0,0,272,
		274,5,2,0,0,273,268,1,0,0,0,273,272,1,0,0,0,274,61,1,0,0,0,275,276,3,66,
		33,0,276,277,3,64,32,0,277,63,1,0,0,0,278,279,5,25,0,0,279,280,3,66,33,
		0,280,281,3,64,32,0,281,284,1,0,0,0,282,284,5,2,0,0,283,278,1,0,0,0,283,
		282,1,0,0,0,284,65,1,0,0,0,285,286,3,70,35,0,286,287,3,68,34,0,287,67,
		1,0,0,0,288,289,5,27,0,0,289,290,3,70,35,0,290,291,3,68,34,0,291,294,1,
		0,0,0,292,294,5,2,0,0,293,288,1,0,0,0,293,292,1,0,0,0,294,69,1,0,0,0,295,
		296,3,76,38,0,296,297,3,72,36,0,297,71,1,0,0,0,298,299,3,74,37,0,299,300,
		3,76,38,0,300,301,3,72,36,0,301,304,1,0,0,0,302,304,5,2,0,0,303,298,1,
		0,0,0,303,302,1,0,0,0,304,73,1,0,0,0,305,306,7,1,0,0,306,75,1,0,0,0,307,
		308,3,82,41,0,308,309,3,78,39,0,309,77,1,0,0,0,310,311,3,80,40,0,311,312,
		3,82,41,0,312,313,3,78,39,0,313,316,1,0,0,0,314,316,5,2,0,0,315,310,1,
		0,0,0,315,314,1,0,0,0,316,79,1,0,0,0,317,318,7,2,0,0,318,81,1,0,0,0,319,
		320,3,88,44,0,320,321,5,48,0,0,321,322,3,84,42,0,322,331,1,0,0,0,323,331,
		3,86,43,0,324,325,5,16,0,0,325,331,3,82,41,0,326,327,5,3,0,0,327,328,3,
		56,28,0,328,329,5,4,0,0,329,331,1,0,0,0,330,319,1,0,0,0,330,323,1,0,0,
		0,330,324,1,0,0,0,330,326,1,0,0,0,331,83,1,0,0,0,332,333,5,5,0,0,333,334,
		3,70,35,0,334,335,5,6,0,0,335,338,1,0,0,0,336,338,5,2,0,0,337,332,1,0,
		0,0,337,336,1,0,0,0,338,85,1,0,0,0,339,340,3,88,44,0,340,341,5,46,0,0,
		341,347,1,0,0,0,342,343,3,88,44,0,343,344,5,47,0,0,344,347,1,0,0,0,345,
		347,5,30,0,0,346,339,1,0,0,0,346,342,1,0,0,0,346,345,1,0,0,0,347,87,1,
		0,0,0,348,349,7,3,0,0,349,89,1,0,0,0,24,98,109,125,132,140,159,165,171,
		180,198,205,217,235,247,254,261,273,283,293,303,315,330,337,346
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
